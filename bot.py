import logging
import sqlite3
import asyncio
import threading
from datetime import datetime, timedelta
from typing import Optional
import json
import time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from aiohttp import web
import requests

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configura√ß√µes do bot
BOT_TOKEN = "7963030995:AAE8K5RIFJpaOhxLnDxJ4k614wnq4n549AQ"
ADMIN_USER_ID = 6150001511
VIP_CHANNEL_ID = -1002280243232
VIP_INVITE_LINK = "https://t.me/+9TBR6fK429tiMmRh"

# Configura√ß√£o dos planos
PLANS = {
    "1": {"name": "Plano VIP 1 m√™s", "price": "R$ 39,90", "days": 30,
          "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540539.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363044086"},
    "3": {"name": "Plano VIP 3 meses", "price": "R$ 99,90", "days": 90,
          "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540599.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363041E24"},
    "6": {"name": "Plano VIP 6 meses", "price": "R$ 179,90", "days": 180,
          "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406179.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363043084"},
    "12": {"name": "Plano VIP 12 meses", "price": "R$ 289,90", "days": 365,
           "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406289.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA620705036304CD13"}
}

class DatabaseManager:
    def __init__(self):
        self.init_db()
    
    def init_db(self):
        conn = sqlite3.connect('subscriptions.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                plan_type TEXT,
                start_date TEXT,
                end_date TEXT,
                is_active INTEGER DEFAULT 1,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
    
    def add_subscription(self, user_id: int, username: str, plan_type: str, days: int):
        conn = sqlite3.connect('subscriptions.db')
        cursor = conn.cursor()
        
        start_date = datetime.now()
        end_date = start_date + timedelta(days=days)
        
        cursor.execute('''
            INSERT OR REPLACE INTO subscriptions 
            (user_id, username, plan_type, start_date, end_date, is_active)
            VALUES (?, ?, ?, ?, ?, 1)
        ''', (user_id, username, plan_type, start_date.isoformat(), end_date.isoformat()))
        
        conn.commit()
        conn.close()
        logger.info(f"Subscription added for user {user_id} - Plan: {plan_type}")
    
    def get_expired_users(self):
        conn = sqlite3.connect('subscriptions.db')
        cursor = conn.cursor()
        
        now = datetime.now().isoformat()
        cursor.execute('''
            SELECT user_id, username, plan_type FROM subscriptions 
            WHERE end_date < ? AND is_active = 1
        ''', (now,))
        
        expired_users = cursor.fetchall()
        conn.close()
        return expired_users
    
    def deactivate_subscription(self, user_id: int):
        conn = sqlite3.connect('subscriptions.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE subscriptions SET is_active = 0 WHERE user_id = ?
        ''', (user_id,))
        
        conn.commit()
        conn.close()
        logger.info(f"Subscription deactivated for user {user_id}")

# Inst√¢ncia do gerenciador de banco
db_manager = DatabaseManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start - Mostra os planos dispon√≠veis"""
    user = update.effective_user
    
    welcome_text = f"""
üîû **Bem-vindo ao Canal VIP da Clarinha!** üîû

Ol√° {user.first_name}! üëã

Escolha seu plano de acesso ao conte√∫do exclusivo:

üíé **PLANOS DISPON√çVEIS:**
‚Ä¢ 1 m√™s - R$ 39,90
‚Ä¢ 3 meses - R$ 99,90  
‚Ä¢ 6 meses - R$ 179,90
‚Ä¢ 12 meses - R$ 289,90

üéÅ **O QUE VOC√ä TER√Å ACESSO:**
‚Ä¢ Conte√∫do exclusivo di√°rio
‚Ä¢ Fotos e v√≠deos em alta qualidade
‚Ä¢ Acesso ao canal VIP privado
‚Ä¢ Suporte direto

Selecione o plano desejado abaixo:
    """
    
    keyboard = [
        [InlineKeyboardButton("üíé 1 M√™s - R$ 39,90", callback_data="plan_1")],
        [InlineKeyboardButton("üíé 3 Meses - R$ 99,90", callback_data="plan_3")],  
        [InlineKeyboardButton("üíé 6 Meses - R$ 179,90", callback_data="plan_6")],
        [InlineKeyboardButton("üíé 12 Meses - R$ 289,90", callback_data="plan_12")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def plan_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback quando um plano √© selecionado"""
    query = update.callback_query
    await query.answer()
    
    plan_id = query.data.split("_")[1]
    plan = PLANS[plan_id]
    
    # Armazenar o plano selecionado no contexto do usu√°rio
    context.user_data['selected_plan'] = plan_id
    
    plan_text = f"""
üíé **{plan['name']}**
üí∞ **Valor:** {plan['price']}
‚è∞ **Dura√ß√£o:** {plan['days']} dias

Para pagar, clique no bot√£o abaixo para gerar o PIX:
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ Gerar PIX", callback_data=f"generate_pix_{plan_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Voltar aos Planos", callback_data="back_to_plans")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(plan_text, reply_markup=reply_markup, parse_mode='Markdown')

async def generate_pix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gera o c√≥digo PIX para pagamento"""
    query = update.callback_query
    await query.answer()
    
    plan_id = query.data.split("_")[2]
    plan = PLANS[plan_id]
    
    pix_text = f"""
üí≥ **PIX PARA PAGAMENTO**

**Plano:** {plan['name']}
**Valor:** {plan['price']}

**C√≥digo PIX:**
```
{plan['pix']}
```

üì± **Como pagar:**
1. Copie o c√≥digo PIX acima
2. Abra seu app do banco
3. V√° em PIX ‚Üí Colar c√≥digo
4. Confirme o pagamento
5. Clique em "Pagamento Realizado" abaixo

‚ö†Ô∏è **Importante:** Ap√≥s o pagamento, clique no bot√£o abaixo para receber o acesso!
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ Pagamento Realizado", callback_data=f"payment_done_{plan_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=f"plan_{plan_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(pix_text, reply_markup=reply_markup, parse_mode='Markdown')

async def payment_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa o pagamento realizado"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    plan_id = query.data.split("_")[2]
    plan = PLANS[plan_id]
    
    try:
        # Adicionar usu√°rio ao canal VIP
        await context.bot.unban_chat_member(
            chat_id=VIP_CHANNEL_ID,
            user_id=user.id
        )
        
        # Salvar assinatura no banco
        username = user.username or user.first_name
        db_manager.add_subscription(user.id, username, plan['name'], plan['days'])
        
        # Notificar admin
        admin_message = f"""
üîî **NOVA ASSINATURA!**

üë§ **Usu√°rio:** @{username} ({user.id})
üíé **Plano:** {plan['name']}
üí∞ **Valor:** {plan['price']}
üìÖ **Data:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
        """
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=admin_message,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Erro ao notificar admin: {e}")
        
        # Confirmar para o usu√°rio
        success_text = f"""
üéâ **PAGAMENTO CONFIRMADO!**

Parab√©ns! Seu acesso foi liberado!

üíé **Plano Ativo:** {plan['name']}
‚è∞ **Dura√ß√£o:** {plan['days']} dias
üìÖ **V√°lido at√©:** {(datetime.now() + timedelta(days=plan['days'])).strftime('%d/%m/%Y')}

üîó **Link do Canal VIP:**
{VIP_INVITE_LINK}

‚ö†Ô∏è **Importante:**
‚Ä¢ Salve este link!
‚Ä¢ N√£o compartilhe com outras pessoas
‚Ä¢ Em caso de d√∫vidas, entre em contato

Aproveite o conte√∫do exclusivo! üî•
        """
        
        await query.edit_message_text(success_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Erro ao processar pagamento: {e}")
        error_text = """
‚ùå **Erro ao processar pagamento**

Ocorreu um erro ao liberar seu acesso. Entre em contato com o suporte.
        """
        await query.edit_message_text(error_text, parse_mode='Markdown')

async def back_to_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Volta para a sele√ß√£o de planos"""
    await start(update, context)

async def check_expired_subscriptions():
    """Verifica e remove usu√°rios com assinatura expirada"""
    while True:
        try:
            expired_users = db_manager.get_expired_users()
            
            if expired_users:
                # Criar inst√¢ncia da aplica√ß√£o para usar o bot
                application = Application.builder().token(BOT_TOKEN).build()
                
                for user_id, username, plan_type in expired_users:
                    try:
                        # Remover do canal VIP
                        await application.bot.ban_chat_member(
                            chat_id=VIP_CHANNEL_ID,
                            user_id=user_id
                        )
                        
                        # Desativar assinatura no banco
                        db_manager.deactivate_subscription(user_id)
                        
                        # Notificar usu√°rio
                        try:
                            await application.bot.send_message(
                                chat_id=user_id,
                                text=f"""
‚è∞ **ASSINATURA EXPIRADA**

Ol√°! Sua assinatura do **{plan_type}** expirou.

Para renovar seu acesso, use o comando /start e escolha um novo plano.

Obrigado por fazer parte da nossa comunidade! üíé
                                """,
                                parse_mode='Markdown'
                            )
                        except:
                            pass  # Usu√°rio pode ter bloqueado o bot
                        
                        # Notificar admin
                        try:
                            await application.bot.send_message(
                                chat_id=ADMIN_USER_ID,
                                text=f"""
‚è∞ **ASSINATURA EXPIRADA**

üë§ **Usu√°rio:** @{username} ({user_id})
üíé **Plano:** {plan_type}
üìÖ **Data:** {datetime.now().strftime('%d/%m/%Y %H:%M')}

Usu√°rio removido automaticamente do canal VIP.
                                """,
                                parse_mode='Markdown'
                            )
                        except:
                            pass
                            
                        logger.info(f"Usu√°rio {user_id} removido - assinatura expirada")
                        
                    except Exception as e:
                        logger.error(f"Erro ao remover usu√°rio {user_id}: {e}")
                
                await application.stop()
            
        except Exception as e:
            logger.error(f"Erro na verifica√ß√£o de assinaturas: {e}")
        
        # Verificar a cada hora
        await asyncio.sleep(3600)

async def health_check(request):
    """Health check endpoint para o Render"""
    return web.Response(text="Bot is running!")

async def start_web_server():
    """Inicia o servidor web para health check"""
    app = web.Application()
    app.router.add_get('/health', health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()
    logger.info("Servidor web iniciado na porta 10000")

def run_subscription_checker():
    """Executa o verificador de assinaturas em thread separada"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(check_expired_subscriptions())

async def delete_webhook_and_start():
    """Deleta webhook antes de iniciar o bot"""
    try:
        # Tentar deletar webhook
        response = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook")
        if response.status_code == 200:
            logger.info("Webhook deletado com sucesso")
        else:
            logger.warning("N√£o foi poss√≠vel deletar webhook, continuando...")
    except Exception as e:
        logger.warning(f"Erro ao deletar webhook: {e}")

async def main():
    """Fun√ß√£o principal"""
    # Deletar webhook primeiro
    await delete_webhook_and_start()
    
    # Criar aplica√ß√£o
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .get_updates_read_timeout(30)
        .get_updates_write_timeout(30)
        .get_updates_connect_timeout(30)
        .get_updates_pool_timeout(30)
        .build()
    )
    
    # Adicionar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(plan_selected, pattern="^plan_"))
    application.add_handler(CallbackQueryHandler(generate_pix, pattern="^generate_pix_"))
    application.add_handler(CallbackQueryHandler(payment_done, pattern="^payment_done_"))
    application.add_handler(CallbackQueryHandler(back_to_plans, pattern="^back_to_plans"))
    
    # Iniciar servidor web
    await start_web_server()
    
    # Iniciar verificador de assinaturas em thread separada
    subscription_thread = threading.Thread(target=run_subscription_checker, daemon=True)
    subscription_thread.start()
    
    logger.info("Bot iniciado com sucesso!")
    
    # Iniciar bot com polling
    await application.run_polling(poll_interval=2, bootstrap_retries=5)

if __name__ == '__main__':
    asyncio.run(main())
