import logging
import sqlite3
import threading
import time
from datetime import datetime, timedelta
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ChatMemberHandler, filters, ContextTypes
import os # Adicionado para os.environ
import http.server
import socketserver
import urllib.request

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Desativa logs HTTP desnecess√°rios
logging.getLogger('httpx').setLevel(logging.WARNING)

# --- Configura√ß√µes Lidas das Vari√°veis de Ambiente ---
# Carrega o ID do administrador do Telegram da vari√°vel de ambiente
ADMIN_ID_STR = os.environ.get('ADMIN_ID')
if ADMIN_ID_STR:
    try:
        ADMIN_ID = int(ADMIN_ID_STR)
    except ValueError:
        logger.error("ERRO CR√çTICO: A vari√°vel de ambiente ADMIN_ID n√£o √© um n√∫mero inteiro v√°lido.")
        exit() # Ou outra forma de parar a execu√ß√£o segura
else:
    logger.error("ERRO CR√çTICO: Vari√°vel de ambiente ADMIN_ID n√£o definida.")
    exit() # Ou outra forma de parar a execu√ß√£o segura

# Carrega o ID do canal VIP da vari√°vel de ambiente
CANAL_VIP_ID = os.environ.get('CANAL_VIP_ID')
if not CANAL_VIP_ID:
    logger.error("ERRO CR√çTICO: Vari√°vel de ambiente CANAL_VIP_ID n√£o definida.")
    exit()

# Carrega o token do bot do Telegram da vari√°vel de ambiente
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    logger.error("ERRO CR√çTICO: Vari√°vel de ambiente TELEGRAM_BOT_TOKEN n√£o definida.")
    exit()

# Links PIX (seus c√≥digos originais - mantenha como est√° ou considere mov√™-los para uma config se forem mudar muito)
LINKS_PIX = {
    "1_mes": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540539.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363044086",
    "3_meses": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540599.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363041E24",
    "6_meses": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406179.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363043084",
    "12_meses": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406289.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA620705036304CD13"
}

# Planos e valores (mantenha como est√° ou considere mov√™-los para uma config)
PLANOS = {
    "1_mes": {"nome": "Plano VIP 1 m√™s", "valor": "R$ 39,90", "dias": 30},
    "3_meses": {"nome": "Plano VIP 3 meses", "valor": "R$ 99,90", "dias": 90},
    "6_meses": {"nome": "Plano VIP 6 meses", "valor": "R$ 179,90", "dias": 180},
    "12_meses": {"nome": "Plano VIP 12 meses", "valor": "R$ 289,90", "dias": 365}
}

# Estados do usu√°rio
user_states = {}
# pending_payments = {} # Removido pois n√£o estava sendo utilizado e a gest√£o √© feita pelo DB

# ... (restante do seu c√≥digo) ...

# Agora, em todo o lugar do seu c√≥digo onde voc√™ usava:
# SEU_USER_ID, voc√™ usar√° ADMIN_ID
# BOT_TOKEN, voc√™ usar√° TELEGRAM_BOT_TOKEN
# CANAL_VIP_ID, o nome da vari√°vel j√° est√° correto, ele apenas ser√° carregado do ambiente.

# Exemplo de altera√ß√£o na fun√ß√£o gerar_pix:
async def gerar_pix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (c√≥digo anterior) ...
    # Notifica voc√™ sobre a nova solicita√ß√£o
    await context.bot.send_message(
        chat_id=ADMIN_ID,  # Alterado de SEU_USER_ID para ADMIN_ID
        text=f"üîî *NOVA SOLICITA√á√ÉO DE PAGAMENTO*\n\n"
             f"üë§ Usu√°rio: @{username} (ID: {user_id})\n"
             f"üíé Plano: {plano['nome']}\n"
             f"üí∞ Valor: {plano['valor']}\n"
             f"‚è∞ Hor√°rio: {datetime.now().strftime('%d/%m/%Y %H:%M')}",
        parse_mode='Markdown'
    )
    # ... (restante da fun√ß√£o) ...

# Exemplo de altera√ß√£o na fun√ß√£o receber_comprovante:
async def receber_comprovante(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (c√≥digo anterior) ...
    # Encaminha a imagem do comprovante
    if update.message.photo:
        await context.bot.send_photo(
            chat_id=ADMIN_ID, # Alterado de SEU_USER_ID para ADMIN_ID
            photo=update.message.photo[-1].file_id,
            caption=f"üìé *COMPROVANTE RECEBIDO*\n\n"
                    # ... (restante da caption)
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif update.message.document:
        await context.bot.send_document(
            chat_id=ADMIN_ID, # Alterado de SEU_USER_ID para ADMIN_ID
            document=update.message.document.file_id,
            caption=f"üìé *COMPROVANTE RECEBIDO*\n\n"
                    # ... (restante da caption)
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    # ... (restante da fun√ß√£o) ...

# Exemplo de altera√ß√£o na fun√ß√£o listar_usuarios:
async def listar_usuarios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID: # Alterado de SEU_USER_ID para ADMIN_ID
        return
    # ... (restante da fun√ß√£o) ...

# Exemplo de altera√ß√£o na fun√ß√£o remover_usuario:
async def remover_usuario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID: # Alterado de SEU_USER_ID para ADMIN_ID
        return
    # ... (restante da fun√ß√£o) ...

# Exemplo de altera√ß√£o na fun√ß√£o verificar_novo_membro:
async def verificar_novo_membro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.chat_member and str(update.chat_member.chat.id) == CANAL_VIP_ID:
        if update.chat_member.new_chat_member.status in ["member", "restricted"]:
            user_id = update.chat_member.new_chat_member.user.id
            
            if user_id == ADMIN_ID or user_id == context.bot.id: # Alterado de SEU_USER_ID para ADMIN_ID
                return
            # ... (restante da fun√ß√£o) ...

# Exemplo de altera√ß√£o na fun√ß√£o remover_usuario_nao_autorizado:
async def remover_usuario_nao_autorizado(user_id, bot): # bot √© passado como argumento
    try:
        await bot.ban_chat_member(CANAL_VIP_ID, user_id)
        await bot.unban_chat_member(CANAL_VIP_ID, user_id)
        logger.info(f"Usu√°rio n√£o autorizado {user_id} removido do canal automaticamente")
        
        # ... (notifica√ß√£o para o usu√°rio) ...
        
        await bot.send_message(
            chat_id=ADMIN_ID, # Alterado de SEU_USER_ID para ADMIN_ID
            text=f"üö´ *Usu√°rio n√£o autorizado removido*\n\n"
                 f"O usu√°rio com ID {user_id} tentou acessar o canal VIP sem autoriza√ß√£o e foi removido automaticamente.",
            parse_mode='Markdown'
        )
        return True
    except Exception as e:
        logger.error(f"Erro ao remover usu√°rio n√£o autorizado {user_id}: {e}")
        return False

# Na fun√ß√£o main(), para inicializar a aplica√ß√£o:
def main():
    # ... (c√≥digo anterior) ...
    # Cria a aplica√ß√£o com configura√ß√µes para evitar conflitos
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build() # Alterado de BOT_TOKEN para TELEGRAM_BOT_TOKEN
    # ... (restante da fun√ß√£o) ...
    return application

# No bloco if __name__ == '__main__':
if __name__ == '__main__':
    try:
        app = main()
        app.run_polling(
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query", "chat_member"]
        )
    except telegram.error.Conflict:
        logger.error("Conflito detectado: outra inst√¢ncia do bot j√° est√° em execu√ß√£o.")
        # N√£o √© ideal tentar reiniciar aqui sem uma estrat√©gia mais robusta.
        # Se voc√™ tem certeza que o conflito √© resolv√≠vel com uma nova tentativa simples,
        # pode manter a segunda tentativa, mas geralmente √© melhor investigar a causa.
        # logger.info("Tentando reiniciar com configura√ß√µes diferentes...")
        # app = main() # Se for tentar de novo, certifique-se que main() pode ser chamada m√∫ltiplas vezes
        # app.run_polling(
        #     drop_pending_updates=True,
        #     allowed_updates=["message", "callback_query", "chat_member"]
        # )
    except Exception as e:
        # Loga o erro espec√≠fico que causou a falha na inicializa√ß√£o,
        # que pode ser uma das vari√°veis de ambiente n√£o encontradas.
        logger.error(f"Erro fatal ao iniciar o bot: {e}", exc_info=True)
