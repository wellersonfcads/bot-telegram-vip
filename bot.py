import logging
import sqlite3
import threading
import time
from datetime import datetime, timedelta
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ChatMemberHandler, filters, ContextTypes
import os
import http.server
import socketserver
import urllib.request

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Desativa logs HTTP desnecess√°rios
logging.getLogger('httpx').setLevel(logging.WARNING)

# --- Configura√ß√µes Lidas das Vari√°veis de Ambiente ---
ADMIN_ID_STR = os.environ.get('ADMIN_ID')
if ADMIN_ID_STR:
    try:
        ADMIN_ID = int(ADMIN_ID_STR)
    except ValueError:
        logger.error("ERRO CR√çTICO: A vari√°vel de ambiente ADMIN_ID n√£o √© um n√∫mero inteiro v√°lido.")
        exit(1)
else:
    logger.error("ERRO CR√çTICO: Vari√°vel de ambiente ADMIN_ID n√£o definida.")
    exit(1)

CANAL_VIP_ID = os.environ.get('CANAL_VIP_ID')
if not CANAL_VIP_ID:
    logger.error("ERRO CR√çTICO: Vari√°vel de ambiente CANAL_VIP_ID n√£o definida.")
    exit(1)

TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    logger.error("ERRO CR√çTICO: Vari√°vel de ambiente TELEGRAM_BOT_TOKEN n√£o definida.")
    exit(1)

# Links PIX
LINKS_PIX = {
    "1_mes": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540539.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363044086",
    "3_meses": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540599.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363041E24",
    "6_meses": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406179.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363043084",
    "12_meses": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406289.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA620705036304CD13"
}

# Planos e valores
PLANOS = {
    "1_mes": {"nome": "Plano VIP 1 m√™s", "valor": "R$ 39,90", "dias": 30},
    "3_meses": {"nome": "Plano VIP 3 meses", "valor": "R$ 99,90", "dias": 90},
    "6_meses": {"nome": "Plano VIP 6 meses", "valor": "R$ 179,90", "dias": 180},
    "12_meses": {"nome": "Plano VIP 12 meses", "valor": "R$ 289,90", "dias": 365}
}

# Estados do usu√°rio
user_states = {} # Considere persistir estados cr√≠ticos no DB para maior robustez

def init_db():
    """Inicializa o banco de dados"""
    conn = sqlite3.connect('vip_bot.db')
    cursor = conn.cursor()
    
    # Tabela de usu√°rios VIP
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS usuarios_vip (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            plano TEXT,
            data_entrada TEXT,
            data_expiracao TEXT,
            ativo INTEGER DEFAULT 1
        )
    ''')
    
    # Tabela de pagamentos pendentes
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS pagamentos_pendentes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            plano TEXT,
            valor TEXT,
            data_solicitacao TEXT,
            comprovante_enviado INTEGER DEFAULT 0,
            aprovado INTEGER DEFAULT 0
        )
    ''')
    
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start com verifica√ß√£o de idade"""
    user_id = update.effective_user.id
    
    # Verifica√ß√£o de idade
    keyboard = [
        [InlineKeyboardButton("‚úÖ Sim, tenho 18 anos ou mais", callback_data="idade_ok")],
        [InlineKeyboardButton("‚ùå N√£o tenho 18 anos", callback_data="idade_nao")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîû *VERIFICA√á√ÉO DE IDADE* üîû\n\n"
        "Oi amor! Antes de continuarmos, preciso confirmar:\n"
        "Voc√™ tem 18 anos ou mais?",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_idade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula a verifica√ß√£o de idade"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "idade_nao":
        await query.edit_message_text(
            "‚ùå Desculpe amor, meu conte√∫do √© apenas para maiores de 18 anos.\n\n"
            "Volte quando completar 18 anos! üòä"
        )
        return
    
    if query.data == "idade_ok":
        user_id = query.from_user.id
        user_states[user_id] = "idade_verificada"
        
        await query.edit_message_text(
            "ü•∞ *Bom te ver por aqui...*\n\n"
            "Que bom que voc√™ chegou at√© mim! "
            "Estou muito animada para te mostrar tudo que preparei especialmente para voc√™...\n\n"
            "Vou te enviar um v√≠deo especial em alguns segundos! üíï",
            parse_mode='Markdown'
        )
        
        # Aguarda 3 segundos e envia o pr√≥ximo passo
        context.application.job_queue.run_once(
            enviar_video_apresentacao, 
            3, 
            data={"chat_id": query.message.chat_id, "user_id": user_id}
        )

async def enviar_video_apresentacao(context: ContextTypes.DEFAULT_TYPE):
    """Envia v√≠deo de apresenta√ß√£o"""
    job_data = context.job.data
    chat_id = job_data["chat_id"]
    user_id = job_data["user_id"] # N√£o utilizado diretamente aqui, mas pode ser √∫til para l√≥gica futura
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="üé• *[V√çDEO DE APRESENTA√á√ÉO]*\n\n"
             "Oi amor! Sou a Clarinha e estou muito feliz que voc√™ chegou at√© aqui! ‚ú®\n\n"
             "_[Aqui seria seu v√≠deo de apresenta√ß√£o]_\n\n"
             "No meu VIP voc√™ vai encontrar conte√∫dos exclusivos que n√£o posto em lugar nenhum... üî•",
        parse_mode='Markdown'
    )
    
    # Aguarda 5 segundos e mostra os planos
    context.application.job_queue.run_once(
        mostrar_acesso_vip, 
        5, 
        data={"chat_id": chat_id, "user_id": user_id}
    )

async def mostrar_acesso_vip(context: ContextTypes.DEFAULT_TYPE):
    """Mostra op√ß√£o de acesso VIP"""
    job_data = context.job.data
    chat_id = job_data["chat_id"]
    
    keyboard = [
        [InlineKeyboardButton("üî• QUERO TER ACESSO AO VIP", callback_data="ver_planos")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="üíé *Quer ter acesso a todo meu conte√∫do completo no VIP?*\n\n"
             "No meu grupo VIP voc√™ vai ter:\n"
             "üî• Minhas fotos e v√≠deos exclusivos\n"
             "üíï Conte√∫do que n√£o posto em lugar nenhum\n"
             "üéØ Acesso direto comigo\n"
             "‚ú® Surpresas especiais s√≥ para meus VIPs\n\n"
             "Clica no bot√£o abaixo para ver os planos dispon√≠veis! üëá",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def mostrar_planos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra os planos VIP dispon√≠veis"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton(f"üíé {PLANOS['1_mes']['nome']} - {PLANOS['1_mes']['valor']}", callback_data="plano_1_mes")],
        [InlineKeyboardButton(f"üíé {PLANOS['3_meses']['nome']} - {PLANOS['3_meses']['valor']}", callback_data="plano_3_meses")],
        [InlineKeyboardButton(f"üíé {PLANOS['6_meses']['nome']} - {PLANOS['6_meses']['valor']}", callback_data="plano_6_meses")],
        [InlineKeyboardButton(f"üíé {PLANOS['12_meses']['nome']} - {PLANOS['12_meses']['valor']}", callback_data="plano_12_meses")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üíé *MEUS PLANOS VIP DISPON√çVEIS*\n\n"
        "Escolhe o plano que mais combina com voc√™, amor:\n\n"
        "‚ú® Todos os planos incluem acesso completo ao meu conte√∫do exclusivo!\n"
        "üî• Quanto maior o plano, melhor o custo-benef√≠cio!\n\n"
        "Clica no plano desejado:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def detalhes_plano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra detalhes do plano selecionado"""
    query = update.callback_query
    await query.answer()
    
    plano_key = query.data.replace("plano_", "")
    if plano_key not in PLANOS:
        logger.error(f"Chave de plano inv√°lida '{plano_key}' em detalhes_plano.")
        await query.edit_message_text("‚ùå Ops! Algo deu errado ao selecionar o plano. Tente novamente.")
        return
        
    plano = PLANOS[plano_key]
    
    user_id = query.from_user.id
    user_states[user_id] = {"plano_selecionado": plano_key} # Estado para saber qual plano foi selecionado
    
    keyboard = [
        [InlineKeyboardButton("üí≥ Gerar PIX", callback_data=f"gerar_pix_{plano_key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Voltar aos Planos", callback_data="ver_planos")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üíé *{plano['nome']}*\n\n"
        f"üí∞ Valor: *{plano['valor']}*\n"
        f"‚è∞ Dura√ß√£o: *{plano['dias']} dias*\n\n"
        f"üî• *O que voc√™ vai receber, amor:*\n"
        f"‚úÖ Acesso total ao meu grupo VIP\n"
        f"‚úÖ Todo meu conte√∫do exclusivo\n"
        f"‚úÖ Minhas fotos e v√≠deos que n√£o posto em lugar nenhum\n"
        f"‚úÖ Contato direto comigo\n"
        f"‚úÖ Meus novos conte√∫dos adicionados regularmente\n\n"
        f"Clique em 'Gerar PIX' para continuar! üëá",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def gerar_pix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gera o PIX para pagamento"""
    query = update.callback_query
    await query.answer()
    
    plano_key = query.data.replace("gerar_pix_", "")
    if plano_key not in PLANOS or plano_key not in LINKS_PIX:
        logger.error(f"Chave de plano inv√°lida '{plano_key}' em gerar_pix.")
        await query.edit_message_text("‚ùå Ops! Algo deu errado ao gerar o PIX. Tente novamente.")
        return

    plano = PLANOS[plano_key]
    pix_code = LINKS_PIX[plano_key]
    
    user_id = query.from_user.id
    username = query.from_user.username or "N√£o informado"
    
    conn = sqlite3.connect('vip_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO pagamentos_pendentes 
        (user_id, username, plano, valor, data_solicitacao) 
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, username, plano_key, plano['valor'], datetime.now().isoformat()))
    conn.commit()
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üìã Copiar PIX", callback_data=f"copiar_pix_{plano_key}")],
        [InlineKeyboardButton("‚úÖ J√° Paguei - Solicitar Acesso", callback_data=f"ja_paguei_{plano_key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=f"plano_{plano_key}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üí≥ *PIX para Pagamento - {plano['nome']}*\n\n"
        f"üí∞ Valor: *{plano['valor']}*\n\n"
        f"üìã *C√≥digo PIX (Copia e Cola):*\n"
        f"`{pix_code}`\n\n"
        f"üì± *Como pagar:*\n"
        f"1Ô∏è‚É£ Clica em 'Copiar PIX' abaixo\n"
        f"2Ô∏è‚É£ Abre seu app banc√°rio\n"
        f"3Ô∏è‚É£ Escolhe PIX > Copia e Cola\n"
        f"4Ô∏è‚É£ Cola o c√≥digo copiado\n"
        f"5Ô∏è‚É£ Confirma o pagamento\n"
        f"6Ô∏è‚É£ Clica em 'J√° Paguei' para me enviar o comprovante\n\n"
        f"üíï Estou ansiosa para te receber no meu VIP, amor!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üîî *NOVA SOLICITA√á√ÉO DE PAGAMENTO*\n\n"
             f"üë§ Usu√°rio: @{username} (ID: {user_id})\n"
             f"üíé Plano: {plano['nome']}\n"
             f"üí∞ Valor: {plano['valor']}\n"
             f"‚è∞ Hor√°rio: {datetime.now().strftime('%d/%m/%Y %H:%M')}",
        parse_mode='Markdown'
    )

async def copiar_pix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Fun√ß√£o para copiar PIX"""
    query = update.callback_query
    # A a√ß√£o de copiar √© feita pelo cliente Telegram ao ver o c√≥digo.
    # Este callback pode ser usado apenas para dar feedback.
    await query.answer("PIX copiado! üìã\nCole no seu app banc√°rio na op√ß√£o PIX > Copia e Cola", show_alert=True)


async def ja_paguei(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Solicita envio de comprovante"""
    query = update.callback_query
    await query.answer()
    
    plano_key = query.data.replace("ja_paguei_", "")
    user_id = query.from_user.id
    user_states[user_id] = {"aguardando_comprovante": plano_key} # Estado crucial
    
    # N√£o h√° bot√£o "Enviar Comprovante" aqui, o bot instrui a enviar a imagem/documento diretamente.
    # Se quiser um bot√£o, pode adicionar, mas a l√≥gica de `solicitar_comprovante` j√° faz isso.
    # Vou simplificar e ir direto para a instru√ß√£o de envio.
    await query.edit_message_text(
        "üìé *Envio de Comprovante*\n\n"
        "Perfeito, amor! Agora preciso do seu comprovante de pagamento para liberar seu acesso ao meu VIP.\n\n"
        "üì∏ *Como me enviar:*\n"
        "Envie diretamente nesta conversa a foto ou screenshot do seu comprovante.\n\n"
        "Pode ser:\n"
        "‚Ä¢ Screenshot da tela de confirma√ß√£o\n"
        "‚Ä¢ Foto do comprovante\n"
        "‚Ä¢ Print do extrato\n\n"
        "‚úÖ Assim que eu verificar, vou liberar seu acesso imediatamente!\n\n"
        "üíï Obrigada pela confian√ßa, amor!",
        # reply_markup=reply_markup, # Removido pois n√£o h√° bot√µes aqui
        parse_mode='Markdown'
    )

async def solicitar_comprovante(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipulador para o bot√£o 'Enviar Comprovante', apenas edita a mensagem."""
    # Esta fun√ß√£o parece redundante se ja_paguei j√° instrui.
    # Se 'enviar_comprovante' for um callback de um bot√£o, esta √© a fun√ß√£o.
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìé *Aguardando Comprovante*\n\n"
        "Agora √© s√≥ me enviar a foto ou screenshot do seu comprovante de pagamento!\n\n"
        "üì∏ Pode ser:\n"
        "‚Ä¢ Screenshot da tela de confirma√ß√£o\n"
        "‚Ä¢ Foto do comprovante\n"
        "‚Ä¢ Print do extrato\n\n"
        "üíï Estou aguardando aqui para liberar seu acesso ao meu VIP!",
        parse_mode='Markdown'
    )

async def receber_comprovante(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recebe e processa o comprovante enviado"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "N√£o informado"
    
    if user_id not in user_states or "aguardando_comprovante" not in user_states[user_id]:
        await update.message.reply_text("‚ùå Erro: N√£o encontrei sua solicita√ß√£o de pagamento. Por favor, inicie o processo novamente com /start ou contate o suporte se j√° pagou.")
        return
    
    plano_key = user_states[user_id]["aguardando_comprovante"]

    if plano_key not in PLANOS:
        await update.message.reply_text("‚ùå Erro: Plano n√£o reconhecido ao processar comprovante. Contate o suporte.")
        logger.error(f"Plano_key '{plano_key}' n√£o encontrado em PLANOS ao receber comprovante do user {user_id}")
        # Limpar estado para evitar loop de erro
        if user_id in user_states:
            del user_states[user_id]
        return
    plano = PLANOS[plano_key]
    
    conn = sqlite3.connect('vip_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE pagamentos_pendentes 
        SET comprovante_enviado = 1 
        WHERE user_id = ? AND plano = ? AND aprovado = 0 
        ORDER BY id DESC LIMIT 1 
    ''', (user_id, plano_key)) # Adicionado ORDER BY e LIMIT para pegar o mais recente se houver duplicatas
    conn.commit()
    conn.close()
    
    if user_id in user_states: # Limpa o estado ap√≥s o processamento
        del user_states[user_id]
    
    await update.message.reply_text(
        "‚úÖ *Comprovante Recebido!*\n\n"
        "Perfeito, amor! Recebi seu comprovante e vou verificar agora mesmo.\n\n"
        "‚è∞ Em poucos minutos voc√™ receber√° o link de acesso ao meu grupo VIP!\n\n"
        "üíï Obrigada pela paci√™ncia, amor!",
        parse_mode='Markdown'
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ Aprovar Acesso", callback_data=f"aprovar_{user_id}_{plano_key}")],
        [InlineKeyboardButton("‚ùå Rejeitar", callback_data=f"rejeitar_{user_id}_{plano_key}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    caption_text = (
        f"üìé *COMPROVANTE RECEBIDO*\n\n"
        f"üë§ Usu√°rio: @{username} (ID: {user_id})\n"
        f"üíé Plano: {plano['nome']}\n"
        f"üí∞ Valor: {plano['valor']}\n"
        f"‚è∞ Hor√°rio: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n"
        f"Clique em uma das op√ß√µes abaixo:"
    )

    if update.message.photo:
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=update.message.photo[-1].file_id,
            caption=caption_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif update.message.document:
        await context.bot.send_document(
            chat_id=ADMIN_ID,
            document=update.message.document.file_id,
            caption=caption_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def processar_aprovacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa aprova√ß√£o ou rejei√ß√£o do pagamento"""
    query = update.callback_query
    await query.answer()
    
    data_parts = query.data.split("_")
    acao = data_parts[0]
    try:
        user_id_pagante = int(data_parts[1])
    except (IndexError, ValueError) as e:
        logger.error(f"Erro ao parsear user_id_pagante de callback_data '{query.data}': {e}")
        await query.edit_message_caption(caption=f"‚ùå Erro ao processar callback: dados inv√°lidos. ({query.data})")
        return

    plano_key = "_".join(data_parts[2:])
    
    if plano_key not in PLANOS:
        logger.error(f"Plano '{plano_key}' n√£o encontrado ao processar aprova√ß√£o para user {user_id_pagante}.")
        await query.edit_message_caption(
            caption=f"‚ùå Erro: Plano '{plano_key}' n√£o encontrado para usu√°rio {user_id_pagante}."
        )
        return
    
    plano = PLANOS[plano_key]
    
    if acao == "aprovar":
        try:
            link_convite = await context.bot.create_chat_invite_link(
                chat_id=CANAL_VIP_ID,
                member_limit=1,
                expire_date=int(time.time()) + (7 * 24 * 60 * 60) # Expira em 7 dias
            )
            
            data_expiracao = datetime.now() + timedelta(days=plano['dias'])
            conn = sqlite3.connect('vip_bot.db')
            cursor = conn.cursor()
            
            # Tenta buscar username atual do usu√°rio
            try:
                chat_user_pagante = await context.bot.get_chat(user_id_pagante)
                username_pagante = chat_user_pagante.username or "N√£o informado"
            except Exception:
                username_pagante = "N√£o recuperado"


            cursor.execute('''
                INSERT OR REPLACE INTO usuarios_vip 
                (user_id, username, plano, data_entrada, data_expiracao, ativo) 
                VALUES (?, ?, ?, ?, ?, 1)
            ''', (user_id_pagante, username_pagante, plano_key, datetime.now().isoformat(), data_expiracao.isoformat()))
            
            cursor.execute('''
                UPDATE pagamentos_pendentes 
                SET aprovado = 1 
                WHERE user_id = ? AND plano = ? AND comprovante_enviado = 1 AND aprovado = 0
                ORDER BY id DESC LIMIT 1
            ''', (user_id_pagante, plano_key))
            
            conn.commit()
            conn.close()
            
            await context.bot.send_message(
                chat_id=user_id_pagante,
                text=f"üéâ *PAGAMENTO APROVADO!*\n\n"
                     f"Seja bem-vindo ao meu VIP, amor! üíï\n\n"
                     f"üíé Seu plano: {plano['nome']}\n"
                     f"‚è∞ V√°lido at√©: {data_expiracao.strftime('%d/%m/%Y')}\n\n"
                     f"üîó *Link de acesso ao meu VIP:*\n{link_convite.invite_link}\n\n"
                     f"‚ö†Ô∏è *Aten√ß√£o, amor:*\n"
                     f"- Este link expira em 7 dias e s√≥ pode ser usado uma vez.\n"
                     f"- Apenas voc√™ est√° autorizado(a) a entrar no meu canal.\n"
                     f"- Qualquer pessoa n√£o autorizada que tentar entrar ser√° removida automaticamente.\n\n"
                     f"‚ú® Aproveite todo meu conte√∫do exclusivo!\n"
                     f"üíï Qualquer d√∫vida, √© s√≥ me chamar!",
                parse_mode='Markdown'
            )
            
            await query.edit_message_caption(
                caption=f"‚úÖ *ACESSO APROVADO*\n\n"
                        f"üë§ Usu√°rio: @{username_pagante} (ID: {user_id_pagante})\n"
                        f"üíé Plano: {plano['nome']}\n"
                        f"üí∞ Valor: {plano['valor']}\n"
                        f"‚è∞ Aprovado em: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
                        f"üìÖ Expira em: {data_expiracao.strftime('%d/%m/%Y')}",
                parse_mode='Markdown'
            )
            
        except telegram.error.TelegramError as te:
            logger.error(f"Erro Telegram ao aprovar acesso para {user_id_pagante}: {te}")
            await query.edit_message_caption(
                caption=f"‚ùå Erro Telegram ao aprovar acesso para {user_id_pagante}: {te}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Erro geral ao aprovar acesso para {user_id_pagante}: {e}", exc_info=True)
            await query.edit_message_caption(
                caption=f"‚ùå Erro geral ao aprovar acesso para {user_id_pagante}: {e}",
                parse_mode='Markdown'
            )
    
    elif acao == "rejeitar":
        conn = sqlite3.connect('vip_bot.db')
        cursor = conn.cursor()
        # Em vez de deletar, podemos marcar como rejeitado para hist√≥rico, ou deletar se preferir.
        # Vou deletar para manter simples, como no original.
        cursor.execute('''
            DELETE FROM pagamentos_pendentes 
            WHERE user_id = ? AND plano = ? AND comprovante_enviado = 1 AND aprovado = 0
            ORDER BY id DESC LIMIT 1
        ''', (user_id_pagante, plano_key))
        conn.commit()
        conn.close()
        
        await context.bot.send_message(
            chat_id=user_id_pagante,
            text="‚ùå *Pagamento n√£o aprovado*\n\n"
                 "Infelizmente n√£o consegui confirmar seu pagamento, amor.\n\n"
                 "üí¨ Entre em contato comigo para resolvermos esta quest√£o.\n"
                 "üîÑ Ou tente fazer um novo pagamento.",
            parse_mode='Markdown'
        )
        
        await query.edit_message_caption(
            caption=f"‚ùå *ACESSO REJEITADO*\n\n"
                    f"üë§ Usu√°rio: ID {user_id_pagante}\n"
                    f"üíé Plano: {plano['nome']}\n"
                    f"‚è∞ Rejeitado em: {datetime.now().strftime('%d/%m/%Y %H:%M')}",
            parse_mode='Markdown'
        )

async def listar_usuarios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Lista usu√°rios VIP ativos"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    conn = sqlite3.connect('vip_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, plano, data_expiracao FROM usuarios_vip WHERE ativo = 1 ORDER BY data_expiracao')
    usuarios = cursor.fetchall()
    conn.close()
    
    if not usuarios:
        await update.message.reply_text("üìã Nenhum usu√°rio VIP ativo no momento.")
        return
    
    texto = "üìã *USU√ÅRIOS VIP ATIVOS*\n\n"
    for usuario_data in usuarios:
        uid, uname, pkey, data_exp_iso = usuario_data
        if pkey not in PLANOS:
            logger.warning(f"Plano {pkey} do usu√°rio {uid} n√£o encontrado em PLANOS ao listar.")
            plano_nome = f"Plano '{pkey}' (Desconhecido)"
        else:
            plano_nome = PLANOS[pkey]['nome']

        data_exp = datetime.fromisoformat(data_exp_iso)
        dias_restantes = (data_exp - datetime.now()).days
        
        texto += f"üë§ ID: {uid} (@{uname if uname else 'N/A'})\n"
        texto += f"üíé Plano: {plano_nome}\n"
        texto += f"üìÖ Expira em: {data_exp.strftime('%d/%m/%Y')}\n"
        texto += f"‚è∞ Dias restantes: {dias_restantes if dias_restantes >= 0 else 'Expirado'}\n\n"
    
    texto += "\nüí° *Para remover um usu√°rio, use:*\n"
    texto += "/remover ID_DO_USUARIO"
    
    if len(texto) > 4096: # Limite de mensagem do Telegram
        partes = [texto[i:i+4000] for i in range(0, len(texto), 4000)] # Divide em partes menores
        for parte in partes:
            await update.message.reply_text(parte, parse_mode='Markdown')
    else:
        await update.message.reply_text(texto, parse_mode='Markdown')

# Modificado para ser um job do JobQueue
async def remover_usuarios_expirados_job(context: ContextTypes.DEFAULT_TYPE):
    """Remove usu√°rios expirados do grupo VIP e DB (executado pelo JobQueue)"""
    logger.info("Executando job de remo√ß√£o de usu√°rios expirados...")
    conn = sqlite3.connect('vip_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT user_id, username, plano, data_expiracao 
        FROM usuarios_vip 
        WHERE ativo = 1 AND data_expiracao < ?
    ''', (datetime.now().isoformat(),))
    
    usuarios_expirados = cursor.fetchall()
    
    if not usuarios_expirados:
        logger.info("Nenhum usu√°rio expirado encontrado.")
    
    for usuario_db in usuarios_expirados:
        user_id_exp, username_exp, _, _ = usuario_db
        try:
            logger.info(f"Tentando remover usu√°rio expirado {user_id_exp} (@{username_exp}) do canal {CANAL_VIP_ID}")
            await context.bot.ban_chat_member(chat_id=CANAL_VIP_ID, user_id=user_id_exp)
            await context.bot.unban_chat_member(chat_id=CANAL_VIP_ID, user_id=user_id_exp) # Para remover sem banir permanentemente
            
            cursor.execute('UPDATE usuarios_vip SET ativo = 0 WHERE user_id = ?', (user_id_exp,))
            conn.commit() # Commit dentro do loop para cada usu√°rio processado com sucesso
            logger.info(f"Usu√°rio {user_id_exp} (@{username_exp}) removido do canal e marcado como inativo no DB.")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id_exp,
                    text="üò¢ *Sua assinatura VIP expirou!*\n\n"
                         "Seu acesso ao meu conte√∫do exclusivo foi encerrado, amor.\n"
                         "Mas n√£o se preocupe! Voc√™ pode renovar a qualquer momento usando o comando /start.\n\n"
                         "Espero te ver de volta em breve! üíï"
                )
            except Exception as e_msg:
                logger.warning(f"N√£o foi poss√≠vel notificar usu√°rio {user_id_exp} sobre expira√ß√£o: {e_msg}")

        except telegram.error.TelegramError as te:
            if "user not found" in str(te).lower() or "chat member not found" in str(te).lower():
                logger.warning(f"Usu√°rio {user_id_exp} n√£o encontrado no canal ao tentar remover por expira√ß√£o (provavelmente j√° saiu). Marcando como inativo. Erro: {te}")
                cursor.execute('UPDATE usuarios_vip SET ativo = 0 WHERE user_id = ?', (user_id_exp,))
                conn.commit()
            else:
                logger.error(f"Erro Telegram ao remover usu√°rio expirado {user_id_exp} do canal: {te}")
        except Exception as e:
            logger.error(f"Erro geral ao processar remo√ß√£o do usu√°rio expirado {user_id_exp}: {e}", exc_info=True)
            
    conn.close()
    logger.info("Job de remo√ß√£o de usu√°rios expirados conclu√≠do.")


async def remover_usuario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Remove um usu√°rio espec√≠fico do canal VIP (comando de admin)"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå *Erro: ID do usu√°rio n√£o fornecido*\n\n"
            "Use o comando assim: /remover ID_DO_USUARIO",
            parse_mode='Markdown'
        )
        return
    
    try:
        user_id_remover = int(context.args[0])
        
        conn = sqlite3.connect('vip_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM usuarios_vip WHERE user_id = ? AND ativo = 1', (user_id_remover,))
        usuario_db = cursor.fetchone()
        
        if not usuario_db:
            await update.message.reply_text(
                f"‚ùå *Erro: Usu√°rio {user_id_remover} n√£o encontrado ou j√° est√° inativo*",
                parse_mode='Markdown'
            )
            conn.close()
            return
        
        try:
            await context.bot.ban_chat_member(CANAL_VIP_ID, user_id_remover)
            await context.bot.unban_chat_member(CANAL_VIP_ID, user_id_remover)
            logger.info(f"Admin removeu usu√°rio {user_id_remover} do canal com sucesso")
            
            cursor.execute('UPDATE usuarios_vip SET ativo = 0 WHERE user_id = ?', (user_id_remover,))
            conn.commit()
            logger.info(f"Status do usu√°rio {user_id_remover} atualizado para inativo no banco de dados por remo√ß√£o manual.")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id_remover,
                    text="‚ö†Ô∏è *Seu acesso ao canal VIP foi revogado*\n\n"
                         "Seu acesso ao conte√∫do VIP foi encerrado pelo administrador.\n\n"
                         "Para mais informa√ß√µes, entre em contato com o suporte.",
                    parse_mode='Markdown'
                )
                logger.info(f"Usu√°rio {user_id_remover} notificado sobre a remo√ß√£o manual.")
            except Exception as e_msg:
                logger.warning(f"Erro ao notificar usu√°rio {user_id_remover} sobre remo√ß√£o manual: {e_msg}")
            
            await update.message.reply_text(
                f"‚úÖ *Usu√°rio {user_id_remover} removido com sucesso!*\n\n"
                f"O usu√°rio foi removido do canal VIP e seu status foi atualizado no banco de dados.",
                parse_mode='Markdown'
            )
            
        except telegram.error.TelegramError as te:
             await update.message.reply_text(
                f"‚ö†Ô∏è *Erro Telegram ao remover usu√°rio {user_id_remover}:* {te}\n\n"
                f"Verifique se o bot √© administrador do canal com permiss√µes para banir membros.",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Erro geral ao remover usu√°rio {user_id_remover} manualmente: {e}", exc_info=True)
            await update.message.reply_text(
                f"‚ö†Ô∏è *Erro geral ao remover usu√°rio {user_id_remover}:* {e}",
                parse_mode='Markdown'
            )
        finally:
            conn.close()
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå *Erro: ID do usu√°rio inv√°lido*\n\n"
            "O ID do usu√°rio deve ser um n√∫mero inteiro.",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Erro ao processar comando /remover: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå *Erro ao processar o comando:* {e}",
            parse_mode='Markdown'
        )

async def verificar_usuario_autorizado(user_id_verificar):
    """Verifica se um usu√°rio est√° autorizado a acessar o canal VIP"""
    conn = sqlite3.connect('vip_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM usuarios_vip WHERE user_id = ? AND ativo = 1 AND data_expiracao >= ?', 
                   (user_id_verificar, datetime.now().isoformat()))
    usuario_autorizado = cursor.fetchone()
    conn.close()
    return usuario_autorizado is not None

async def remover_usuario_nao_autorizado(user_id_remover, bot_instance: telegram.Bot):
    """Remove um usu√°rio n√£o autorizado do canal VIP"""
    try:
        await bot_instance.ban_chat_member(CANAL_VIP_ID, user_id_remover)
        await bot_instance.unban_chat_member(CANAL_VIP_ID, user_id_remover)
        logger.info(f"Usu√°rio n√£o autorizado {user_id_remover} removido do canal {CANAL_VIP_ID} automaticamente")
        
        try:
            await bot_instance.send_message(
                chat_id=user_id_remover,
                text="‚ö†Ô∏è *Acesso n√£o autorizado*\n\n"
                     "Voc√™ foi removido do meu canal VIP porque seu acesso n√£o foi autorizado ou sua assinatura expirou.\n\n"
                     "Para obter acesso, voc√™ precisa adquirir um dos meus planos VIP atrav√©s do bot.\n"
                     "Use o comando /start para iniciar o processo de compra.",
                parse_mode='Markdown'
            )
        except Exception as e_msg:
            logger.warning(f"Erro ao notificar usu√°rio n√£o autorizado {user_id_remover}: {e_msg}")
        
        await bot_instance.send_message(
            chat_id=ADMIN_ID,
            text=f"üö´ *Usu√°rio n√£o autorizado removido*\n\n"
                 f"O usu√°rio com ID {user_id_remover} tentou acessar o canal VIP {CANAL_VIP_ID} sem autoriza√ß√£o e foi removido automaticamente.",
            parse_mode='Markdown'
        )
        return True
    except telegram.error.TelegramError as te:
        logger.error(f"Erro Telegram ao remover usu√°rio n√£o autorizado {user_id_remover} do canal {CANAL_VIP_ID}: {te}")
    except Exception as e:
        logger.error(f"Erro geral ao remover usu√°rio n√£o autorizado {user_id_remover} do canal {CANAL_VIP_ID}: {e}", exc_info=True)
    return False

async def verificar_novo_membro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Verifica se um novo membro do canal est√° autorizado"""
    if update.chat_member and str(update.chat_member.chat.id) == str(CANAL_VIP_ID): # Comparar como string √© mais seguro
        new_member_status = update.chat_member.new_chat_member.status
        user = update.chat_member.new_chat_member.user
        
        if new_member_status in [telegram.constants.ChatMemberStatus.MEMBER, telegram.constants.ChatMemberStatus.RESTRICTED]:
            user_id_novo = user.id
            
            if user_id_novo == ADMIN_ID or user_id_novo == context.bot.id:
                return
            
            logger.info(f"Novo membro detectado no canal VIP {CANAL_VIP_ID}: ID {user_id_novo} (@{user.username})")
            
            autorizado = await verificar_usuario_autorizado(user_id_novo)
            
            if not autorizado:
                logger.warning(f"Usu√°rio N√ÉO AUTORIZADO detectado no canal VIP {CANAL_VIP_ID}: ID {user_id_novo} (@{user.username}). Removendo...")
                await remover_usuario_nao_autorizado(user_id_novo, context.bot)
            else:
                logger.info(f"Novo membro ID {user_id_novo} (@{user.username}) est√° AUTORIZADO no canal VIP {CANAL_VIP_ID}.")


def keep_alive_ping(): # Renomeado para evitar conflito com a fun√ß√£o keep_alive do Render
    """Fun√ß√£o para manter o servi√ßo ativo fazendo auto-ping (se necess√°rio)"""
    host_url = os.environ.get('RENDER_EXTERNAL_URL')
    if not host_url:
        logger.info("RENDER_EXTERNAL_URL n√£o definida. Auto-ping desativado.")
        return

    while True:
        try:
            with urllib.request.urlopen(host_url, timeout=10) as response: # Adicionado timeout
                if response.status == 200:
                    logger.info(f"Keep-alive ping para {host_url} enviado com sucesso.")
                else:
                    logger.warning(f"Keep-alive ping para {host_url} retornou status {response.status}.")
        except Exception as e:
            logger.error(f"Erro no keep-alive ping para {host_url}: {e}")
        
        time.sleep(14 * 60) # Ping a cada 14 minutos (Render free tier sleeps after 15 min inactivity)

class KeepAliveHandler(http.server.SimpleHTTPRequestHandler):
    """Handler para o servidor HTTP de keep-alive"""
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Bot is running!')

def start_keep_alive_server():
    """Inicia o servidor HTTP para keep-alive (para Render e similares)"""
    port = int(os.environ.get('PORT', 8080)) # Render define a PORT env var
    
    # Tenta reusar o endere√ßo para evitar problemas em rein√≠cios r√°pidos
    socketserver.TCPServer.allow_reuse_address = True
    try:
        with socketserver.TCPServer(("", port), KeepAliveHandler) as httpd:
            logger.info(f"Servidor keep-alive HTTP iniciado na porta {port}")
            httpd.serve_forever()
    except OSError as e:
        logger.error(f"Erro ao iniciar servidor keep-alive na porta {port}: {e}. A porta pode j√° estar em uso.")
    except Exception as e:
        logger.error(f"Exce√ß√£o n√£o esperada ao iniciar servidor keep-alive: {e}", exc_info=True)


def main():
    """Fun√ß√£o principal do bot"""
    init_db()
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Handlers de Comando
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("usuarios", listar_usuarios))
    application.add_handler(CommandHandler("remover", remover_usuario))
    
    # Handlers de CallbackQuery
    application.add_handler(CallbackQueryHandler(handle_idade, pattern="^idade_"))
    application.add_handler(CallbackQueryHandler(mostrar_planos, pattern="^ver_planos$"))
    application.add_handler(CallbackQueryHandler(detalhes_plano, pattern="^plano_"))
    application.add_handler(CallbackQueryHandler(gerar_pix, pattern="^gerar_pix_"))
    application.add_handler(CallbackQueryHandler(copiar_pix, pattern="^copiar_pix_"))
    application.add_handler(CallbackQueryHandler(ja_paguei, pattern="^ja_paguei_"))
    application.add_handler(CallbackQueryHandler(solicitar_comprovante, pattern="^enviar_comprovante$")) # Se ainda usar este bot√£o
    application.add_handler(CallbackQueryHandler(processar_aprovacao, pattern="^(aprovar|rejeitar)_"))
    
    # Handler para receber comprovantes (imagens e documentos que podem ser imagens)
    application.add_handler(MessageHandler(
        filters.PHOTO | filters.Document.IMAGE, 
        receber_comprovante
    ))
    
    # Handler para verificar novos membros no canal
    application.add_handler(ChatMemberHandler(verificar_novo_membro, ChatMemberHandler.CHAT_MEMBER))
    
    # JobQueue para tarefas agendadas
    job_queue = application.job_queue
    # Executa a cada hora (3600s), come√ßando 10s ap√≥s o bot iniciar.
    job_queue.run_repeating(remover_usuarios_expirados_job, interval=3600, first=10) 
    
    # Inicia o servidor HTTP para keep-alive em uma thread separada
    # Isso √© necess√°rio para que o bot continue rodando e respondendo
    if os.environ.get('RENDER'): # Inicia o servidor HTTP apenas se estiver no Render (ou similar que precise)
        server_thread = threading.Thread(target=start_keep_alive_server, daemon=True)
        server_thread.start()

        # O auto-ping √© opcional se a plataforma j√° pinga o servidor HTTP exposto.
        # Se RENDER_EXTERNAL_URL estiver definida, o ping pode ser uma garantia extra.
        if os.environ.get('RENDER_EXTERNAL_URL'):
            keep_alive_ping_thread = threading.Thread(target=keep_alive_ping, daemon=True)
            keep_alive_ping_thread.start()
    
    logger.info("Bot iniciado! Pressione Ctrl+C para parar.")
    return application

if __name__ == '__main__':
    try:
        app = main()
        # allowed_updates especifica quais tipos de updates seu bot vai processar
        app.run_polling(
            drop_pending_updates=True, 
            allowed_updates=Update.ALL_TYPES # Ou especifique os tipos que voc√™ realmente precisa
        )
    except telegram.error.Conflict:
        logger.error("Conflito detectado: outra inst√¢ncia do bot j√° est√° em execu√ß√£o. Verifique se n√£o h√° outro processo rodando.")
    except Exception as e:
        logger.error(f"Erro fatal ao iniciar ou executar o bot: {e}", exc_info=True)
