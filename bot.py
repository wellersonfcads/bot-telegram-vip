import logging
import sqlite3
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import schedule
import time
from threading import Thread

# Configura√ß√£o do logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√µes do bot
TOKEN = "7963030995:AAE8K5RIFJpaOhxLnDxJ4k614wnq4n549AQ"
CANAL_VIP_LINK = "https://t.me/+9TBR6fK429tiMmRh"
CANAL_VIP_ID = "-1002280243232"  # ID do seu canal VIP

# Dados dos planos
PLANOS = {
    "1mes": {
        "nome": "Plano VIP 1 m√™s",
        "valor": "R$ 39,90",
        "duracao": 30,
        "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540539.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA62070503***63044086"
    },
    "3meses": {
        "nome": "Plano VIP 3 meses",
        "valor": "R$ 99,90",
        "duracao": 90,
        "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540599.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA62070503***63041E24"
    },
    "6meses": {
        "nome": "Plano VIP 6 meses",
        "valor": "R$ 179,90",
        "duracao": 180,
        "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406179.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA62070503***63043084"
    },
    "12meses": {
        "nome": "Plano VIP 12 meses",
        "valor": "R$ 289,90",
        "duracao": 365,
        "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406289.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA62070503***6304CD13"
    }
}

# Inicializa√ß√£o do banco de dados
def init_db():
    conn = sqlite3.connect('usuarios_vip.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            plano TEXT,
            data_entrada TEXT,
            data_expiracao TEXT,
            ativo INTEGER DEFAULT 1
        )
    ''')
    conn.commit()
    conn.close()

# Fun√ß√µes do banco de dados
def adicionar_usuario(user_id, username, plano):
    conn = sqlite3.connect('usuarios_vip.db')
    cursor = conn.cursor()
    
    data_entrada = datetime.now()
    data_expiracao = data_entrada + timedelta(days=PLANOS[plano]["duracao"])
    
    cursor.execute('''
        INSERT OR REPLACE INTO usuarios (user_id, username, plano, data_entrada, data_expiracao, ativo)
        VALUES (?, ?, ?, ?, ?, 1)
    ''', (user_id, username, plano, data_entrada.isoformat(), data_expiracao.isoformat()))
    
    conn.commit()
    conn.close()
    return data_expiracao

def verificar_usuarios_expirados():
    conn = sqlite3.connect('usuarios_vip.db')
    cursor = conn.cursor()
    
    agora = datetime.now().isoformat()
    cursor.execute('''
        SELECT user_id, username, plano FROM usuarios 
        WHERE data_expiracao < ? AND ativo = 1
    ''', (agora,))
    
    usuarios_expirados = cursor.fetchall()
    
    # Marcar como inativos
    cursor.execute('''
        UPDATE usuarios SET ativo = 0 
        WHERE data_expiracao < ? AND ativo = 1
    ''', (agora,))
    
    conn.commit()
    conn.close()
    
    return usuarios_expirados

def listar_usuarios_ativos():
    conn = sqlite3.connect('usuarios_vip.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT user_id, username, plano, data_entrada, data_expiracao 
        FROM usuarios WHERE ativo = 1
        ORDER BY data_expiracao
    ''')
    
    usuarios = cursor.fetchall()
    conn.close()
    return usuarios

# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üíé Ver Planos VIP", callback_data="ver_planos")],
        [InlineKeyboardButton("üìû Suporte", url="https://t.me/seusupporte")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üî• *Bem-vindo ao VIP da Clarinha!* üî•\n\n"
        "Aqui voc√™ tem acesso ao conte√∫do mais exclusivo! üíã\n\n"
        "Escolha seu plano e tenha acesso completo:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Mostrar planos dispon√≠veis
async def ver_planos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    
    for plano_id, dados in PLANOS.items():
        texto_botao = f"{dados['nome']} - {dados['valor']}"
        keyboard.append([InlineKeyboardButton(texto_botao, callback_data=f"plano_{plano_id}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data="voltar_inicio")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    texto = (
        "üíé *PLANOS VIP DISPON√çVEIS* üíé\n\n"
        "üî• **Conte√∫do 100% exclusivo**\n"
        "üì∏ **Fotos e v√≠deos in√©ditos**\n"
        "üí¨ **Intera√ß√£o direta**\n"
        "üéÅ **Surpresas semanais**\n\n"
        "Escolha o plano ideal para voc√™:"
    )
    
    query = update.callback_query
    await query.edit_message_text(texto, reply_markup=reply_markup, parse_mode='Markdown')

# Mostrar detalhes de um plano espec√≠fico
async def mostrar_plano(update: Update, context: ContextTypes.DEFAULT_TYPE, plano_id: str):
    plano = PLANOS[plano_id]
    
    keyboard = [
        [InlineKeyboardButton("üí≥ Gerar PIX", callback_data=f"gerar_pix_{plano_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Voltar aos Planos", callback_data="ver_planos")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    texto = (
        f"üíé *{plano['nome']}*\n\n"
        f"üí∞ **Valor:** {plano['valor']}\n"
        f"‚è∞ **Dura√ß√£o:** {plano['duracao']} dias\n\n"
        f"üî• **O que voc√™ vai receber:**\n"
        f"‚Ä¢ Acesso completo ao canal VIP\n"
        f"‚Ä¢ Conte√∫do exclusivo di√°rio\n"
        f"‚Ä¢ Fotos e v√≠deos em alta qualidade\n"
        f"‚Ä¢ Intera√ß√£o direta comigo\n"
        f"‚Ä¢ Pedidos personalizados\n\n"
        f"Clique em 'Gerar PIX' para finalizar sua compra!"
    )
    
    query = update.callback_query
    await query.edit_message_text(texto, reply_markup=reply_markup, parse_mode='Markdown')

# Gerar PIX para pagamento
async def gerar_pix(update: Update, context: ContextTypes.DEFAULT_TYPE, plano_id: str):
    plano = PLANOS[plano_id]
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ J√° Paguei - Solicitar Acesso", callback_data=f"solicitar_acesso_{plano_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=f"plano_{plano_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Aqui voc√™ pode gerar um QR Code se quiser
    texto = (
        f"üí≥ *PIX PARA PAGAMENTO*\n\n"
        f"üìã **Plano:** {plano['nome']}\n"
        f"üí∞ **Valor:** {plano['valor']}\n\n"
        f"**Chave PIX (Copia e Cola):**\n"
        f"`{plano['pix']}`\n\n"
        f"‚ö†Ô∏è **IMPORTANTE:**\n"
        f"‚Ä¢ Ap√≥s o pagamento, clique em 'J√° Paguei'\n"
        f"‚Ä¢ Seu acesso ser√° liberado em at√© 5 minutos\n"
        f"‚Ä¢ Guarde o comprovante de pagamento"
    )
    
    query = update.callback_query
    await query.edit_message_text(texto, reply_markup=reply_markup, parse_mode='Markdown')

# Solicitar acesso ap√≥s pagamento
async def solicitar_acesso(update: Update, context: ContextTypes.DEFAULT_TYPE, plano_id: str):
    query = update.callback_query
    user = query.from_user
    
    # Adicionar usu√°rio no banco de dados
    data_expiracao = adicionar_usuario(user.id, user.username, plano_id)
    
    plano = PLANOS[plano_id]
    
    # Enviar link do canal VIP
    keyboard = [
        [InlineKeyboardButton("üî• ENTRAR NO VIP", url=CANAL_VIP_LINK)],
        [InlineKeyboardButton("üìû Suporte", url="https://t.me/seusupporte")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    texto = (
        f"üéâ **PAGAMENTO CONFIRMADO!** üéâ\n\n"
        f"‚úÖ Seu {plano['nome']} foi ativado!\n"
        f"üìÖ **V√°lido at√©:** {data_expiracao.strftime('%d/%m/%Y √†s %H:%M')}\n\n"
        f"üî• **Clique no bot√£o abaixo para entrar no VIP:**\n\n"
        f"‚ö†Ô∏è **IMPORTANTE:**\n"
        f"‚Ä¢ Salve este link: {CANAL_VIP_LINK}\n"
        f"‚Ä¢ Seu acesso expira automaticamente\n"
        f"‚Ä¢ Entre em contato com o suporte se tiver d√∫vidas"
    )
    
    await query.edit_message_text(texto, reply_markup=reply_markup, parse_mode='Markdown')
    
    # Notificar administrador sobre nova venda
    try:
        await context.bot.send_message(
            chat_id=SEU_USER_ID,  # Substitua pelo seu user ID
            text=f"üí∞ NOVA VENDA!\n\n"
                 f"üë§ Usu√°rio: @{user.username or 'Sem username'}\n"
                 f"üìã Plano: {plano['nome']}\n"
                 f"üí∞ Valor: {plano['valor']}\n"
                 f"üìÖ Expira em: {data_expiracao.strftime('%d/%m/%Y')}"
        )
    except:
        pass

# Voltar ao in√≠cio
async def voltar_inicio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üíé Ver Planos VIP", callback_data="ver_planos")],
        [InlineKeyboardButton("üìû Suporte", url="https://t.me/seusupporte")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query = update.callback_query
    await query.edit_message_text(
        "üî• *Bem-vindo ao VIP da Clarinha!* üî•\n\n"
        "Aqui voc√™ tem acesso ao conte√∫do mais exclusivo! üíã\n\n"
        "Escolha seu plano e tenha acesso completo:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Handler para bot√µes inline
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "ver_planos":
        await ver_planos(update, context)
    elif query.data == "voltar_inicio":
        await voltar_inicio(update, context)
    elif query.data.startswith("plano_"):
        plano_id = query.data.replace("plano_", "")
        await mostrar_plano(update, context, plano_id)
    elif query.data.startswith("gerar_pix_"):
        plano_id = query.data.replace("gerar_pix_", "")
        await gerar_pix(update, context, plano_id)
    elif query.data.startswith("solicitar_acesso_"):
        plano_id = query.data.replace("solicitar_acesso_", "")
        await solicitar_acesso(update, context, plano_id)

# Comandos administrativos
async def admin_usuarios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Verificar se √© admin (substitua pelo seu user ID)
    if update.effective_user.id != SEU_USER_ID:
        return
    
    usuarios = listar_usuarios_ativos()
    
    if not usuarios:
        await update.message.reply_text("üìä Nenhum usu√°rio ativo no momento.")
        return
    
    texto = "üìä **USU√ÅRIOS ATIVOS:**\n\n"
    
    for user_id, username, plano, entrada, expiracao in usuarios:
        data_exp = datetime.fromisoformat(expiracao)
        dias_restantes = (data_exp - datetime.now()).days
        
        texto += (
            f"üë§ @{username or 'Sem username'}\n"
            f"üìã Plano: {PLANOS[plano]['nome']}\n"
            f"‚è∞ Expira em: {dias_restantes} dias\n"
            f"üìÖ Data: {data_exp.strftime('%d/%m/%Y')}\n\n"
        )
    
    await update.message.reply_text(texto, parse_mode='Markdown')

# Fun√ß√£o para remover usu√°rios expirados
async def remover_usuarios_expirados(context: ContextTypes.DEFAULT_TYPE):
    usuarios_expirados = verificar_usuarios_expirados()
    
    if not usuarios_expirados:
        return
    
    for user_id, username, plano in usuarios_expirados:
        try:
            # Remover do canal VIP
            await context.bot.ban_chat_member(CANAL_VIP_ID, user_id)
            # Desbanir para que possa entrar novamente se comprar outro plano
            await context.bot.unban_chat_member(CANAL_VIP_ID, user_id)
            
            # Notificar o usu√°rio
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚è∞ Seu {PLANOS[plano]['nome']} expirou!\n\n"
                     f"Para continuar tendo acesso ao conte√∫do VIP, "
                     f"escolha um novo plano:\n\n"
                     f"/start"
            )
            
            logger.info(f"Usu√°rio {username} ({user_id}) removido por expira√ß√£o do plano {plano}")
            
        except Exception as e:
            logger.error(f"Erro ao remover usu√°rio {user_id}: {e}")
    
    # Notificar admin sobre remo√ß√µes
    if usuarios_expirados:
        try:
            await context.bot.send_message(
                chat_id=SEU_USER_ID,
                text=f"üîÑ {len(usuarios_expirados)} usu√°rios removidos por expira√ß√£o de plano."
            )
        except:
            pass

# Configurar verifica√ß√£o autom√°tica
def configurar_verificacao_automatica(application):
    # Verificar a cada hora
    job_queue = application.job_queue
    if job_queue is not None:
        job_queue.run_repeating(remover_usuarios_expirados, interval=3600, first=10)
    else:
        logger.warning("JobQueue n√£o dispon√≠vel. Verifica√ß√£o autom√°tica desabilitada.")

# Fun√ß√£o principal
def main():
    # Inicializar banco de dados
    init_db()
    
    # Criar aplica√ß√£o
    application = Application.builder().token(TOKEN).build()
    
    # Configurar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("usuarios", admin_usuarios))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # Configurar verifica√ß√£o autom√°tica
    configurar_verificacao_automatica(application)
    
    # Iniciar bot
    logger.info("Bot iniciado!")
    application.run_polling()

# Configura√ß√µes que voc√™ precisa alterar:
SEU_USER_ID = 6150001511  # Seu user ID do Telegram

if __name__ == '__main__':
    main()
