import os
import logging
import datetime
import asyncio
import json
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configura√ß√µes do bot a partir de vari√°veis de ambiente
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CANAL_VIP_ID = int(os.getenv("CANAL_VIP_ID"))
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# Verificar se as vari√°veis de ambiente foram carregadas corretamente
if not all([TOKEN, CANAL_VIP_ID, ADMIN_ID]):
    logger.error("Erro: Vari√°veis de ambiente n√£o configuradas corretamente.")
    logger.error("Certifique-se de criar um arquivo .env com as configura√ß√µes necess√°rias.")
    logger.error("Voc√™ pode usar o arquivo .env.example como modelo.")
    exit(1)

# Informa√ß√µes dos planos
PLANOS = {
    "1_mes": {
        "nome": "Plano VIP 1 m√™s",
        "valor": "R$ 39,90",
        "duracao_dias": 30,
        "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540539.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA62070503***63044086"
    },
    "3_meses": {
        "nome": "Plano VIP 3 meses",
        "valor": "R$ 99,90",
        "duracao_dias": 90,
        "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540599.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA62070503***63041E24"
    },
    "6_meses": {
        "nome": "Plano VIP 6 meses",
        "valor": "R$ 179,90",
        "duracao_dias": 180,
        "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406179.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA62070503***63043084"
    },
    "12_meses": {
        "nome": "Plano VIP 12 meses",
        "valor": "R$ 289,90",
        "duracao_dias": 365,
        "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406289.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA62070503***6304CD13"
    }
}

# Arquivo para armazenar os usu√°rios e suas assinaturas
USUARIOS_DB = "usuarios.json"

# Fun√ß√£o para carregar os dados dos usu√°rios
def carregar_usuarios():
    if os.path.exists(USUARIOS_DB):
        with open(USUARIOS_DB, 'r') as file:
            try:
                return json.load(file)
            except json.JSONDecodeError:
                logger.error("Erro ao decodificar o arquivo de usu√°rios")
                return {}
    return {}

# Fun√ß√£o para salvar os dados dos usu√°rios
def salvar_usuarios(usuarios):
    with open(USUARIOS_DB, 'w') as file:
        json.dump(usuarios, file, indent=4)

# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üî• Plano VIP 1 m√™s - R$ 39,90", callback_data="plano_1_mes")],
        [InlineKeyboardButton("üî• Plano VIP 3 meses - R$ 99,90", callback_data="plano_3_meses")],
        [InlineKeyboardButton("üî• Plano VIP 6 meses - R$ 179,90", callback_data="plano_6_meses")],
        [InlineKeyboardButton("üî• Plano VIP 12 meses - R$ 289,90", callback_data="plano_12_meses")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîû *BEM-VINDO AO CONTE√öDO VIP* üîû\n\n"
        "Escolha um plano para ter acesso ao conte√∫do exclusivo:\n",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Fun√ß√£o para processar a escolha do plano
async def processar_plano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    plano_id = query.data.replace("plano_", "")
    plano = PLANOS.get(plano_id)
    
    if not plano:
        await query.edit_message_text(text="Plano n√£o encontrado. Por favor, tente novamente.")
        return
    
    # Bot√£o para gerar o PIX
    keyboard = [
        [InlineKeyboardButton("üí∞ Gerar PIX", callback_data=f"pix_{plano_id}")],
        [InlineKeyboardButton("üîô Voltar", callback_data="voltar")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"*{plano['nome']}*\n\n"
        f"Valor: *{plano['valor']}*\n\n"
        f"Dura√ß√£o: *{plano['duracao_dias']} dias*\n\n"
        f"Clique em 'Gerar PIX' para realizar o pagamento.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Fun√ß√£o para gerar o PIX
async def gerar_pix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    plano_id = query.data.replace("pix_", "")
    plano = PLANOS.get(plano_id)
    
    if not plano:
        await query.edit_message_text(text="Plano n√£o encontrado. Por favor, tente novamente.")
        return
    
    # Bot√µes para confirmar pagamento ou voltar
    keyboard = [
        [InlineKeyboardButton("‚úÖ Confirmar Pagamento", callback_data=f"confirmar_{plano_id}")],
        [InlineKeyboardButton("üîô Voltar", callback_data=f"plano_{plano_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"*{plano['nome']}*\n\n"
        f"Valor: *{plano['valor']}*\n\n"
        f"*Copie o c√≥digo PIX abaixo:*\n`{plano['pix']}`\n\n"
        f"Ap√≥s realizar o pagamento, clique em 'Confirmar Pagamento'.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Fun√ß√£o para confirmar o pagamento
async def confirmar_pagamento(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    plano_id = query.data.replace("confirmar_", "")
    plano = PLANOS.get(plano_id)
    
    if not plano:
        await query.edit_message_text(text="Plano n√£o encontrado. Por favor, tente novamente.")
        return
    
    user_id = query.from_user.id
    username = query.from_user.username or f"user_{user_id}"
    
    # Notificar o administrador sobre o pagamento
    admin_message = (
        f"üîî *NOVA SOLICITA√á√ÉO DE ACESSO* üîî\n\n"
        f"Usu√°rio: @{username} (ID: {user_id})\n"
        f"Plano: {plano['nome']}\n"
        f"Valor: {plano['valor']}\n\n"
        f"Aguardando confirma√ß√£o de pagamento."
    )
    
    # Bot√µes para o admin aprovar ou rejeitar
    admin_keyboard = [
        [InlineKeyboardButton("‚úÖ Aprovar", callback_data=f"aprovar_{user_id}_{plano_id}")],
        [InlineKeyboardButton("‚ùå Rejeitar", callback_data=f"rejeitar_{user_id}")]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_message,
            reply_markup=admin_reply_markup,
            parse_mode='Markdown'
        )
        
        # Informar ao usu√°rio que o pagamento est√° sendo processado
        await query.edit_message_text(
            "‚úÖ *Solicita√ß√£o enviada com sucesso!*\n\n"
            "Seu pagamento est√° sendo verificado pelo administrador.\n"
            "Voc√™ receber√° o link de acesso assim que o pagamento for confirmado.",
            parse_mode='Markdown'
        )
    except TelegramError as e:
        logger.error(f"Erro ao enviar mensagem para o administrador: {e}")
        await query.edit_message_text(
            "‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente mais tarde."
        )

# Fun√ß√£o para o administrador aprovar o pagamento
async def aprovar_pagamento(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # Extrair informa√ß√µes do callback_data
    _, user_id, plano_id = query.data.split("_")
    user_id = int(user_id)
    plano = PLANOS.get(plano_id)
    
    if not plano:
        await query.edit_message_text(text="Plano n√£o encontrado.")
        return
    
    # Gerar link de convite para o canal VIP
    try:
        invite_link = await context.bot.create_chat_invite_link(
            chat_id=CANAL_VIP_ID,
            expire_date=None,  # Link n√£o expira
            member_limit=1  # Limite de 1 uso
        )
        
        # Calcular a data de expira√ß√£o da assinatura
        data_inicio = datetime.datetime.now()
        data_expiracao = data_inicio + datetime.timedelta(days=plano["duracao_dias"])
        
        # Salvar informa√ß√µes do usu√°rio
        usuarios = carregar_usuarios()
        usuarios[str(user_id)] = {
            "plano": plano_id,
            "data_inicio": data_inicio.isoformat(),
            "data_expiracao": data_expiracao.isoformat(),
            "invite_link": invite_link.invite_link
        }
        salvar_usuarios(usuarios)
        
        # Enviar link de convite para o usu√°rio
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ *Pagamento aprovado!* üéâ\n\n"
                 f"Seu acesso ao *{plano['nome']}* foi liberado.\n\n"
                 f"Clique no link abaixo para acessar o canal VIP:\n"
                 f"{invite_link.invite_link}\n\n"
                 f"Seu acesso expira em: {data_expiracao.strftime('%d/%m/%Y')}\n\n"
                 f"Aproveite o conte√∫do exclusivo! üîû",
            parse_mode='Markdown'
        )
        
        # Atualizar mensagem do admin
        await query.edit_message_text(
            f"‚úÖ Acesso aprovado para o usu√°rio ID: {user_id}\n"
            f"Plano: {plano['nome']}\n"
            f"Expira em: {data_expiracao.strftime('%d/%m/%Y')}"
        )
        
    except TelegramError as e:
        logger.error(f"Erro ao criar link de convite: {e}")
        await query.edit_message_text(f"‚ùå Erro ao criar link de convite: {e}")

# Fun√ß√£o para o administrador rejeitar o pagamento
async def rejeitar_pagamento(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # Extrair ID do usu√°rio do callback_data
    _, user_id = query.data.split("_")
    user_id = int(user_id)
    
    try:
        # Informar ao usu√°rio que o pagamento foi rejeitado
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå *Pagamento n√£o confirmado* ‚ùå\n\n"
                 "N√£o foi poss√≠vel confirmar seu pagamento.\n"
                 "Por favor, verifique se o pagamento foi realizado corretamente e tente novamente.",
            parse_mode='Markdown'
        )
        
        # Atualizar mensagem do admin
        await query.edit_message_text(f"‚ùå Pagamento rejeitado para o usu√°rio ID: {user_id}")
        
    except TelegramError as e:
        logger.error(f"Erro ao enviar mensagem de rejei√ß√£o: {e}")
        await query.edit_message_text(f"‚ùå Erro ao enviar mensagem de rejei√ß√£o: {e}")

# Fun√ß√£o para voltar ao menu principal
async def voltar_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üî• Plano VIP 1 m√™s - R$ 39,90", callback_data="plano_1_mes")],
        [InlineKeyboardButton("üî• Plano VIP 3 meses - R$ 99,90", callback_data="plano_3_meses")],
        [InlineKeyboardButton("üî• Plano VIP 6 meses - R$ 179,90", callback_data="plano_6_meses")],
        [InlineKeyboardButton("üî• Plano VIP 12 meses - R$ 289,90", callback_data="plano_12_meses")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîû *BEM-VINDO AO CONTE√öDO VIP* üîû\n\n"
        "Escolha um plano para ter acesso ao conte√∫do exclusivo:\n",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Comando para verificar assinaturas expiradas (apenas para o administrador)
async def verificar_expiracoes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # Verificar se o comando foi enviado pelo administrador
    if user_id != ADMIN_ID:
        await update.message.reply_text("Voc√™ n√£o tem permiss√£o para usar este comando.")
        return
    
    usuarios = carregar_usuarios()
    agora = datetime.datetime.now()
    expirados = []
    
    for user_id, info in usuarios.items():
        data_expiracao = datetime.datetime.fromisoformat(info["data_expiracao"])
        if agora > data_expiracao:
            expirados.append((user_id, info))
    
    if not expirados:
        await update.message.reply_text("N√£o h√° assinaturas expiradas no momento.")
        return
    
    # Listar assinaturas expiradas
    mensagem = "üìä *Assinaturas Expiradas* üìä\n\n"
    
    for user_id, info in expirados:
        plano_id = info["plano"]
        plano_nome = PLANOS.get(plano_id, {}).get("nome", "Plano desconhecido")
        data_expiracao = datetime.datetime.fromisoformat(info["data_expiracao"])
        
        mensagem += f"Usu√°rio ID: {user_id}\n"
        mensagem += f"Plano: {plano_nome}\n"
        mensagem += f"Expirou em: {data_expiracao.strftime('%d/%m/%Y')}\n\n"
    
    # Bot√£o para remover todos os expirados
    keyboard = [[InlineKeyboardButton("üóëÔ∏è Remover Todos Expirados", callback_data="remover_expirados")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        mensagem,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Fun√ß√£o para remover todos os usu√°rios expirados
async def remover_expirados(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # Verificar se o comando foi enviado pelo administrador
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("Voc√™ n√£o tem permiss√£o para usar este comando.")
        return
    
    usuarios = carregar_usuarios()
    agora = datetime.datetime.now()
    expirados = []
    
    # Identificar usu√°rios expirados
    for user_id, info in list(usuarios.items()):
        data_expiracao = datetime.datetime.fromisoformat(info["data_expiracao"])
        if agora > data_expiracao:
            expirados.append(int(user_id))
            del usuarios[user_id]
    
    # Salvar usu√°rios atualizados
    salvar_usuarios(usuarios)
    
    # Remover usu√°rios do canal VIP
    bot = context.bot
    removidos = 0
    falhas = 0
    
    for user_id in expirados:
        try:
            await bot.ban_chat_member(CANAL_VIP_ID, user_id)
            await bot.unban_chat_member(CANAL_VIP_ID, user_id)  # Desbanir para permitir que entre novamente no futuro
            removidos += 1
            
            # Notificar o usu√°rio sobre a expira√ß√£o
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text="‚è∞ *Sua assinatura expirou* ‚è∞\n\n"
                         "Seu acesso ao conte√∫do VIP foi encerrado porque sua assinatura expirou.\n\n"
                         "Para renovar seu acesso, inicie uma nova conversa com o bot e escolha um plano.",
                    parse_mode='Markdown'
                )
            except TelegramError:
                # Ignorar erros ao enviar mensagem para o usu√°rio
                pass
            
        except TelegramError as e:
            logger.error(f"Erro ao remover usu√°rio {user_id}: {e}")
            falhas += 1
    
    # Atualizar mensagem com o resultado
    await query.edit_message_text(
        f"üóëÔ∏è *Remo√ß√£o de usu√°rios expirados* üóëÔ∏è\n\n"
        f"Total de usu√°rios expirados: {len(expirados)}\n"
        f"Removidos com sucesso: {removidos}\n"
        f"Falhas na remo√ß√£o: {falhas}",
        parse_mode='Markdown'
    )

# Fun√ß√£o para verificar assinaturas automaticamente
async def verificar_assinaturas_automaticamente(bot):
    while True:
        try:
            usuarios = carregar_usuarios()
            agora = datetime.datetime.now()
            expirados = []
            
            # Identificar usu√°rios expirados
            for user_id, info in list(usuarios.items()):
                data_expiracao = datetime.datetime.fromisoformat(info["data_expiracao"])
                if agora > data_expiracao:
                    expirados.append(int(user_id))
                    del usuarios[user_id]
            
            # Salvar usu√°rios atualizados
            if expirados:
                salvar_usuarios(usuarios)
            
                # Remover usu√°rios do canal VIP
                for user_id in expirados:
                    try:
                        await bot.ban_chat_member(CANAL_VIP_ID, user_id)
                        await bot.unban_chat_member(CANAL_VIP_ID, user_id)  # Desbanir para permitir que entre novamente no futuro
                        
                        # Notificar o usu√°rio sobre a expira√ß√£o
                        try:
                            await bot.send_message(
                                chat_id=user_id,
                                text="‚è∞ *Sua assinatura expirou* ‚è∞\n\n"
                                     "Seu acesso ao conte√∫do VIP foi encerrado porque sua assinatura expirou.\n\n"
                                     "Para renovar seu acesso, inicie uma nova conversa com o bot e escolha um plano.",
                                parse_mode='Markdown'
                            )
                        except TelegramError:
                            # Ignorar erros ao enviar mensagem para o usu√°rio
                            pass
                        
                    except TelegramError as e:
                        logger.error(f"Erro ao remover usu√°rio {user_id}: {e}")
                
                # Notificar o administrador
                if expirados:
                    try:
                        await bot.send_message(
                            chat_id=ADMIN_ID,
                            text=f"üîî *Notifica√ß√£o Autom√°tica* üîî\n\n"
                                 f"{len(expirados)} usu√°rios com assinaturas expiradas foram removidos do canal VIP.",
                            parse_mode='Markdown'
                        )
                    except TelegramError as e:
                        logger.error(f"Erro ao notificar administrador: {e}")
            
        except Exception as e:
            logger.error(f"Erro na verifica√ß√£o autom√°tica: {e}")
        
        # Verificar a cada 24 horas
        await asyncio.sleep(86400)  # 24 horas em segundos

# Fun√ß√£o para iniciar o servidor web para o Render
def start_web_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Bot is running!')
    
    port = int(os.environ.get("PORT", 8080))
    server = HTTPServer(('0.0.0.0', port), Handler)
    threading.Thread(target=server.serve_forever, daemon=True).start()
    print(f"Started web server on port {port}")

# Fun√ß√£o principal
async def main():
    # Iniciar servidor web para o Render
    start_web_server()
    
    # Criar a aplica√ß√£o
    application = Application.builder().token(TOKEN).build()
    
    # Adicionar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("verificar", verificar_expiracoes))
    
    # Adicionar callback handlers
    application.add_handler(CallbackQueryHandler(processar_plano, pattern=r"^plano_"))
    application.add_handler(CallbackQueryHandler(gerar_pix, pattern=r"^pix_"))
    application.add_handler(CallbackQueryHandler(confirmar_pagamento, pattern=r"^confirmar_"))
    application.add_handler(CallbackQueryHandler(aprovar_pagamento, pattern=r"^aprovar_"))
    application.add_handler(CallbackQueryHandler(rejeitar_pagamento, pattern=r"^rejeitar_"))
    application.add_handler(CallbackQueryHandler(voltar_menu, pattern=r"^voltar$"))
    application.add_handler(CallbackQueryHandler(remover_expirados, pattern=r"^remover_expirados$"))
    
    # Iniciar o bot
    bot = Bot(TOKEN)
    
    # Iniciar a verifica√ß√£o autom√°tica de assinaturas em segundo plano
    asyncio.create_task(verificar_assinaturas_automaticamente(bot))
    
    # Iniciar o polling com close_loop=False para evitar o erro "Cannot close a running event loop"
    await application.run_polling(close_loop=False)

if __name__ == "__main__":
    # Configurar o loop de eventos
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        # Executar a fun√ß√£o main ass√≠ncrona
        loop.run_until_complete(main())
        # Manter o loop rodando para o servidor web
        loop.run_forever()
    except KeyboardInterrupt:
        # Encerrar graciosamente quando Ctrl+C for pressionado
        print("Bot encerrado pelo usu√°rio")
    finally:
        # Limpar recursos
        loop.close()
