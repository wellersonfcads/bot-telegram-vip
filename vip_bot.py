import logging
import sqlite3
import asyncio
import threading
import time
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configura√ß√µes - ALTERE AQUI
TOKEN = "7963030995:AAE8K5RIFJpaOhxLnDxJ4k614wnq4n549AQ" # SEU TOKEN DO BOTFATHER
SEU_USER_ID = 6150001511  # Seu user ID para receber notifica√ß√µes e administrar
CANAL_VIP_ID = "-1002280243232"  # ID do seu canal VIP (num√©rico, com -100...)
# CANAL_PREVIAS = "@oiclarinhaalves" # Se precisar usar o @ do canal de pr√©vias em algum momento

# Dados dos planos
PLANOS = {
    "1mes": {"nome": "Plano VIP 1 m√™s", "valor": "R$ 39,90", "duracao": 30, "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540539.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363044086"},
    "3meses": {"nome": "Plano VIP 3 meses", "valor": "R$ 99,90", "duracao": 90, "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f520400005303986540599.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363041E24"},
    "6meses": {"nome": "Plano VIP 6 meses", "valor": "R$ 179,90", "duracao": 180, "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406179.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA6207050363043084"},
    "12meses": {"nome": "Plano VIP 12 meses", "valor": "R$ 289,90", "duracao": 365, "pix": "00020101021126580014br.gov.bcb.pix01369cf720a7-fa96-4b33-8a37-76a401089d5f5204000053039865406289.905802BR5919AZ FULL ADMINISTRAC6008BRASILIA620705036304CD13"}
}

# Link do v√≠deo de apresenta√ß√£o - SUBSTITUA pelo seu v√≠deo (link direto para o arquivo ou ID do arquivo no Telegram)
VIDEO_URL = "BAACAgIAAxkBAAIBlGZ3_NdJb0y4p4Q38GNBq9B5jWOkAAJJSQAC7vJZSDKr1KzCQuvQNAQ" # EXEMPLO de File ID, substitua pelo seu
# Se for um link para um post em canal, o bot precisaria ter acesso ao canal.
# Um file_id √© mais confi√°vel se o v√≠deo j√° estiver no Telegram.
# Para obter o file_id, envie o v√≠deo para o @RawDataBot e ele te mostrar√° o file_id.

# Estados dos usu√°rios para controle do fluxo e armazenamento tempor√°rio de message_id
# estados_usuarios[user_id] = {"estado_atual": "...", "plano_escolhido": "...", "mensagem_pix_id": ... , "idade_verificada": True/False}
estados_usuarios = {}
DB_NAME = 'usuarios_vip.db'

def inicializar_banco():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS usuarios_vip (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        nome TEXT,
        plano_id TEXT, -- Alterado para plano_id
        data_entrada TEXT,
        data_expiracao TEXT,
        ativo INTEGER DEFAULT 1,
        idade_verificada INTEGER DEFAULT 0 -- Novo campo
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS pagamentos_pendentes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        nome TEXT,
        plano_id TEXT, -- Alterado para plano_id
        valor TEXT,
        data_solicitacao TEXT,
        comprovante_enviado INTEGER DEFAULT 0,
        aprovado INTEGER DEFAULT 0,
        mensagem_pix_id INTEGER -- Novo campo para controlar a mensagem do PIX
    )
    ''')
    conn.commit()
    conn.close()

def get_user_db_info(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT idade_verificada FROM usuarios_vip WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return {"idade_verificada": bool(result[0])}
    return {"idade_verificada": False}

def set_user_idade_verificada(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO usuarios_vip (user_id, idade_verificada) VALUES (?, 0)", (user_id,))
    cursor.execute("UPDATE usuarios_vip SET idade_verificada = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    logger.info(f"Usu√°rio {user_id} teve idade verificada e salva no DB.")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_db_info = get_user_db_info(user.id)

    # Limpar estados anteriores para este usu√°rio
    estados_usuarios[user.id] = {}

    if user_db_info.get("idade_verificada", False):
        logger.info(f"Usu√°rio {user.id} j√° tem idade verificada. Pulando para boas vindas.")
        # Se j√° verificou a idade, vai direto para a pr√≥xima etapa
        await boas_vindas_fluxo(update, context, user, is_callback=False)
    else:
        logger.info(f"Usu√°rio {user.id} precisa verificar a idade.")
        keyboard = [
            [InlineKeyboardButton("‚úÖ Sim, tenho 18 anos ou mais", callback_data="idade_ok")],
            [InlineKeyboardButton("‚ùå N√£o tenho 18 anos", callback_data="idade_nok")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üîû Ol√°! Antes de continuarmos, preciso confirmar uma coisinha...\n\n"
            "Voc√™ tem 18 anos ou mais?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

async def boas_vindas_fluxo(update: Update, context: ContextTypes.DEFAULT_TYPE, user, is_callback=True):
    """Continua o fluxo ap√≥s a verifica√ß√£o de idade ou para usu√°rios j√° verificados."""
    if is_callback:
        target_message = update.callback_query.edit_message_text
    else:
        target_message = update.message.reply_text

    await target_message(
        "Bom te ver por aqui... ü•∞\n\n"
        "Que bom que voc√™ chegou at√© mim! ‚ú®",
        reply_markup=None # Remove bot√µes da mensagem anterior
    )
    await asyncio.sleep(2)

    try:
        if VIDEO_URL:
            await context.bot.send_chat_action(chat_id=user.id, action="upload_video")
            await context.bot.send_video(
                chat_id=user.id,
                video=VIDEO_URL, # Use o file_id aqui
                caption="üìπ Deixei um v√≠deo especial pra voc√™ conhecer um pouquinho do meu trabalho..."
            )
        else:
            await context.bot.send_message(
                chat_id=user.id,
                text="üìπ Deixei um v√≠deo especial pra voc√™ conhecer um pouquinho do meu trabalho..."
            )
    except Exception as e:
        logger.error(f"Erro ao enviar v√≠deo para {user.id}: {e}")
        await context.bot.send_message(
            chat_id=user.id,
            text="üìπ Deixei um v√≠deo especial pra voc√™ conhecer um pouquinho do meu trabalho... (v√≠deo indispon√≠vel no momento)"
        )

    await asyncio.sleep(3)
    keyboard = [[InlineKeyboardButton("üî• Quero ver os Planos VIP üî•", callback_data="ver_planos")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=user.id,
        text="üíé Quer ter acesso a todo meu conte√∫do completo no VIP?\n\n"
             "üî• Conte√∫dos exclusivos toda semana\n"
             "üì± Fotos e v√≠deos in√©ditos que voc√™ n√£o v√™ em nenhum outro lugar\n"
             "üí¨ Intera√ß√£o e surpresas especiais...\n\n"
             "üëá Clique no bot√£o abaixo e escolha seu plano:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    data = query.data
    chat_id = user.id

    # Inicializar estado do usu√°rio se n√£o existir
    if chat_id not in estados_usuarios:
        estados_usuarios[chat_id] = {}

    await query.answer() # Responde ao callback para remover o "loading" do bot√£o

    # Verifica√ß√£o de idade
    if data == "idade_nok":
        await query.edit_message_text(
            "‚ùå Que pena! Este cantinho √© apenas para maiores de 18 anos.\n\n"
            "Volte quando completar a maioridade! üòä"
        )
        return
    elif data == "idade_ok":
        set_user_idade_verificada(user.id) # Salva no DB
        estados_usuarios[chat_id]["idade_verificada"] = True
        await boas_vindas_fluxo(update, context, user) # Chama a fun√ß√£o de boas vindas
        return

    # Limpar mensagem de PIX se existir e o usu√°rio navegou para outro lugar
    if "mensagem_pix_id" in estados_usuarios[chat_id] and not data.startswith("copiar_pix_") and not data.startswith("paguei_"):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=estados_usuarios[chat_id]["mensagem_pix_id"])
        except Exception as e:
            logger.warning(f"N√£o foi poss√≠vel deletar mensagem PIX {estados_usuarios[chat_id]['mensagem_pix_id']}: {e}")
        del estados_usuarios[chat_id]["mensagem_pix_id"]


    if data == "ver_planos":
        keyboard = []
        for plano_id_key, plano_info in PLANOS.items():
            keyboard.append([InlineKeyboardButton(
                f"üíé {plano_info['nome']} - {plano_info['valor']}",
                callback_data=f"plano_{plano_id_key}"
            )])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üíé **MEUS PLANOS VIP** üíé\n\n"
            "Escolha o que mais te agrada e vem se divertir comigo:\n\n"
            "üî• **1 M√äS DE ACESSO** - R$ 39,90\n"
            "üî• **3 MESES DE ACESSO** - R$ 99,90 *(O mais pedido!)*\n"
            "üî• **6 MESES DE ACESSO** - R$ 179,90 *(Melhor custo-benef√≠cio!)*\n"
            "üî• **12 MESES DE ACESSO** - R$ 289,90 *(Acesso VIP total por 1 ano!)*\n\n"
            "üëá √â s√≥ clicar no plano que voc√™ quer:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

    elif data.startswith("plano_"):
        plano_id = data.replace("plano_", "")
        if plano_id in PLANOS:
            plano = PLANOS[plano_id]
            estados_usuarios[chat_id]["plano_escolhido"] = plano_id # Armazena o ID do plano

            keyboard = [
                [InlineKeyboardButton("üí≥ Gerar PIX para Pagamento", callback_data=f"gerar_pix_{plano_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è Voltar aos planos", callback_data="ver_planos")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üíé **Voc√™ escolheu: {plano['nome']}**\n\n"
                f"üí∞ **Valor:** {plano['valor']}\n"
                f"‚è∞ **Dura√ß√£o do Acesso:** {plano['duracao']} dias de pura divers√£o!\n\n"
                f"üî• **O que te espera no VIP:**\n"
                f"üì± Acesso total ao meu cantinho secreto no Telegram\n"
                f"üé¨ V√≠deos exclusivos que fa√ßo s√≥ pra assinantes\n"
                f"üì∏ Fotos in√©ditas e picantes todos os dias\n"
                f"üí¨ Nossa intera√ß√£o mais pr√≥xima e surpresas que preparo com carinho!\n\n"
                f"üëá Pronta(o) para garantir seu acesso?",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

    elif data.startswith("gerar_pix_"):
        plano_id = data.replace("gerar_pix_", "")
        if plano_id in PLANOS:
            plano = PLANOS[plano_id]
            pix_code = plano['pix']
            estados_usuarios[chat_id]["plano_escolhido"] = plano_id # Garante que est√° salvo

            keyboard = [
                [InlineKeyboardButton("üìã Copiar C√≥digo PIX", callback_data=f"copiar_pix_{plano_id}")],
                [InlineKeyboardButton("‚úÖ J√° paguei! Enviar Comprovante", callback_data=f"solicitar_comprovante_{plano_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è Voltar aos planos", callback_data="ver_planos")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # Edita a mensagem anterior para mostrar o PIX
            await query.edit_message_text(
                f"üí≥ **PIX para Pagamento - {plano['nome']}**\n\n"
                f"üí∞ **Valor:** {plano['valor']}\n\n"
                f"üîë **Meu PIX (Copia e Cola):**\n"
                f"`{pix_code}`\n\n" # C√≥digo PIX entre crases para c√≥pia f√°cil
                f"üì± **Como fazer:**\n"
                f"1Ô∏è‚É£ Clique em 'Copiar C√≥digo PIX' (vou te mandar o c√≥digo separado tamb√©m!)\n"
                f"2Ô∏è‚É£ Abra o app do seu banco\n"
                f"3Ô∏è‚É£ Escolha a op√ß√£o PIX Copia e Cola\n"
                f"4Ô∏è‚É£ Cole o c√≥digo e confirme o pagamento\n"
                f"5Ô∏è‚É£ Volte aqui e clique em 'J√° paguei! Enviar Comprovante'\n\n"
                f"Te espero l√° no VIP! üòâ",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            # Guarda o ID da mensagem que cont√©m o PIX para poder edit√°-la ou delet√°-la depois
            estados_usuarios[chat_id]["mensagem_pix_id_principal"] = query.message.message_id


    elif data.startswith("copiar_pix_"):
        plano_id = data.replace("copiar_pix_", "")
        if plano_id in PLANOS:
            plano = PLANOS[plano_id]
            pix_code = plano['pix']
            # Envia o c√≥digo PIX como mensagem separada para facilitar a c√≥pia
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"Aqui est√° o c√≥digo PIX para o {plano['nome']} ({plano['valor']}):\n\n`{pix_code}`\n\n√â s√≥ copiar e colar no seu app do banco! üòâ",
                parse_mode=ParseMode.MARKDOWN
            )
            await query.answer("C√≥digo PIX enviado no chat para facilitar a c√≥pia! ‚úÖ", show_alert=True)


    elif data.startswith("solicitar_comprovante_"):
        plano_id = data.replace("solicitar_comprovante_", "")
        if plano_id in PLANOS:
            plano = PLANOS[plano_id]
            estados_usuarios[chat_id]["plano_escolhido"] = plano_id
            estados_usuarios[chat_id]["estado_atual"] = "aguardando_comprovante"

            # Remover a mensagem do PIX se ainda estiver vis√≠vel (a principal)
            if "mensagem_pix_id_principal" in estados_usuarios[chat_id]:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=estados_usuarios[chat_id]["mensagem_pix_id_principal"])
                    del estados_usuarios[chat_id]["mensagem_pix_id_principal"]
                except Exception as e:
                    logger.warning(f"N√£o foi poss√≠vel deletar mensagem PIX principal: {e}")


            await query.edit_message_text(
                text=f" Combinado! Para o {plano['nome']} ({plano['valor']}).\n\n"
                     f"Agora, por favor, me envie o comprovante do pagamento (print da tela ou foto).\n\n"
                     f"Assim que eu receber e confirmar, libero seu acesso rapidinho! üì∏‚ú®\n\n"
                     f"(√â s√≥ anexar a imagem aqui na nossa conversa)",
                reply_markup=None, # Remove bot√µes anteriores
                parse_mode=ParseMode.MARKDOWN
            )
            # Registrar no banco de dados que um pagamento est√° pendente
            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            cursor.execute('''
            INSERT INTO pagamentos_pendentes
            (user_id, username, nome, plano_id, valor, data_solicitacao, comprovante_enviado, aprovado)
            VALUES (?, ?, ?, ?, ?, ?, 0, 0)
            ''', (
                user.id,
                user.username or "N/A",
                user.full_name or "N/A",
                plano_id, # Usando plano_id
                plano['valor'],
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ))
            conn.commit()
            conn.close()


async def handle_comprovante(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = user.id

    if chat_id in estados_usuarios and estados_usuarios[chat_id].get("estado_atual") == "aguardando_comprovante":
        plano_id = estados_usuarios[chat_id].get("plano_escolhido")
        if not plano_id or plano_id not in PLANOS:
            await update.message.reply_text("Ops! Parece que houve um problema ao identificar seu plano. Por favor, tente selecionar o plano novamente ou fale comigo.")
            return

        plano = PLANOS[plano_id]

        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
        UPDATE pagamentos_pendentes
        SET comprovante_enviado = 1
        WHERE user_id = ? AND plano_id = ? AND aprovado = 0 ORDER BY id DESC LIMIT 1
        ''', (user.id, plano_id)) # Garantir que atualiza o mais recente se houver m√∫ltiplos
        conn.commit()
        conn.close()

        del estados_usuarios[chat_id]["estado_atual"] # Limpa o estado

        admin_message = (
            f"üí≥ **NOVO COMPROVANTE RECEBIDO!** üéâ\n\n"
            f"üë§ **De:** {user.full_name or 'Nome n√£o dispon√≠vel'}\n"
            f"üÜî **ID:** `{user.id}`\n"
            f"üì± **Username:** @{user.username or 'N√£o tem'}\n"
            f"üíé **Plano Escolhido:** {plano['nome']}\n"
            f"üí∞ **Valor:** {plano['valor']}\n\n"
            f"Verifique o comprovante e, se estiver tudo OK, use:\n"
            f"`/aprovar {user.id} {plano_id}`\n\n"
            f"Se precisar rejeitar:\n"
            f"`/rejeitar {user.id}`"
        )

        try:
            if update.message.photo:
                await context.bot.send_photo(
                    chat_id=SEU_USER_ID,
                    photo=update.message.photo[-1].file_id,
                    caption=admin_message,
                    parse_mode=ParseMode.MARKDOWN
                )
            elif update.message.document:
                await context.bot.send_document(
                    chat_id=SEU_USER_ID,
                    document=update.message.document.file_id,
                    caption=admin_message,
                    parse_mode=ParseMode.MARKDOWN
                )
            else: # Caso seja uma mensagem de texto tentando ser comprovante
                await context.bot.send_message(SEU_USER_ID, f"O usu√°rio {user.full_name} (ID: {user.id}) enviou uma mensagem de texto como comprovante para o plano {plano['nome']}. Por favor, verifique.\nMensagem: {update.message.text}")
                await update.message.reply_text(
                    "üì∏ Humm, n√£o consegui identificar uma imagem aqui. Por favor, envie o print ou foto do comprovante para eu poder analisar! Se tiver dificuldades, me avise."
                )
                return

            await update.message.reply_text(
                "‚úÖ Comprovante recebido com sucesso!\n\n"
                "Obrigada! üòä J√° recebi seu comprovante e vou dar uma olhadinha agora mesmo.\n\n"
                "‚ö° Assim que eu confirmar, seu acesso ser√° liberado e te aviso aqui!\n\n"
                "Enquanto isso, que tal dar uma espiadinha no meu Instagram? üòâ (coloque seu @ aqui se quiser)"
            )
        except Exception as e:
            logger.error(f"Erro ao encaminhar comprovante para admin ou responder usu√°rio: {e}")
            await update.message.reply_text("Ocorreu um erro ao processar seu comprovante. Vou verificar e te aviso!")
            await context.bot.send_message(SEU_USER_ID, f"‚ö†Ô∏è Erro ao processar comprovante do usu√°rio {user.id} para o plano {plano_id}: {e}")
    else:
        # Se o usu√°rio enviar uma foto/documento fora do fluxo de comprovante
        await update.message.reply_text("Oi! üòä Se voc√™ est√° tentando me enviar um comprovante, por favor, selecione um plano e clique em 'J√° paguei!' primeiro, ok? Se precisar de ajuda, √© s√≥ chamar!")


async def aprovar_pagamento(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != SEU_USER_ID:
        await update.message.reply_text("‚ùå Acesso negado. Este comando √© s√≥ para a admin aqui! üòâ")
        return

    try:
        user_id_aprovar = int(context.args[0])
        plano_id_aprovar = context.args[1] # Pega o plano_id dos argumentos
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå Formato incorreto! Use: /aprovar <user_id> <plano_id>\nExemplo: /aprovar 123456789 1mes")
        return

    if plano_id_aprovar not in PLANOS:
        await update.message.reply_text(f"‚ùå Plano ID '{plano_id_aprovar}' n√£o √© v√°lido. Planos dispon√≠veis: {', '.join(PLANOS.keys())}")
        return

    plano = PLANOS[plano_id_aprovar]

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    SELECT id, username, nome FROM pagamentos_pendentes
    WHERE user_id = ? AND plano_id = ? AND comprovante_enviado = 1 AND aprovado = 0
    ORDER BY id DESC LIMIT 1
    ''', (user_id_aprovar, plano_id_aprovar))
    pagamento = cursor.fetchone()

    if not pagamento:
        await update.message.reply_text(f"‚ùå Nenhum pagamento pendente encontrado para o usu√°rio ID {user_id_aprovar} com o plano {plano['nome']} que tenha enviado comprovante, ou j√° foi aprovado.")
        conn.close()
        return

    pagamento_db_id, user_username, user_nome = pagamento
    data_entrada = datetime.now()
    data_expiracao = data_entrada + timedelta(days=plano['duracao'])

    cursor.execute('''
    INSERT OR REPLACE INTO usuarios_vip
    (user_id, username, nome, plano_id, data_entrada, data_expiracao, ativo, idade_verificada)
    VALUES (?, ?, ?, ?, ?, ?, 1, (SELECT idade_verificada FROM usuarios_vip WHERE user_id = ?)) 
    ON CONFLICT(user_id) DO UPDATE SET
    username=excluded.username, nome=excluded.nome, plano_id=excluded.plano_id, data_entrada=excluded.data_entrada,
    data_expiracao=excluded.data_expiracao, ativo=1
    ''', (
        user_id_aprovar,
        user_username,
        user_nome,
        plano_id_aprovar, # Usando plano_id
        data_entrada.strftime("%Y-%m-%d %H:%M:%S"),
        data_expiracao.strftime("%Y-%m-%d %H:%M:%S"),
        user_id_aprovar # Para a subquery de idade_verificada
    ))

    cursor.execute('UPDATE pagamentos_pendentes SET aprovado = 1 WHERE id = ?', (pagamento_db_id,))
    conn.commit()
    conn.close()

    link_convite_canal = f"https://t.me/+9TBR6fK429tiMmRh" # Seu link de convite principal

    try:
        # Tentar criar um link de convite espec√≠fico para o usu√°rio (mais seguro)
        # O bot precisa ser admin COM PERMISS√ÉO de "Convidar usu√°rios via link"
        invite_link_obj = await context.bot.create_chat_invite_link(
            chat_id=CANAL_VIP_ID,
            member_limit=1,
            expire_date=int(time.time()) + (60 * 60 * 24)  # Link v√°lido por 1 dia
        )
        link_para_usuario = invite_link_obj.invite_link
        logger.info(f"Link de convite espec√≠fico criado para {user_id_aprovar}: {link_para_usuario}")
    except Exception as e:
        logger.error(f"N√£o foi poss√≠vel criar link de convite espec√≠fico para {CANAL_VIP_ID}: {e}. Usando link principal.")
        link_para_usuario = link_convite_canal # Fallback para o link principal

    try:
        await context.bot.send_message(
            chat_id=user_id_aprovar,
            text=f"üéâ **UAU! PAGAMENTO APROVADO!** üéâ\n\n"
                 f"Parab√©ns, meu amor! Seu pagamento foi confirmado e seu acesso ao VIP est√° liberado! üî•\n\n"
                 f"üíé **Seu plano:** {plano['nome']}\n"
                 f"üìÖ **V√°lido at√©:** {data_expiracao.strftime('%d/%m/%Y')}\n\n"
                 f"üëá **Clique no link abaixo para entrar no nosso para√≠so:**\n"
                 f"{link_para_usuario}\n\n"
                 f"Mal posso esperar para te ver l√° dentro! üòòüíï\n\n"
                 f"Qualquer d√∫vida, √© s√≥ me chamar! ü•∞",
            parse_mode=ParseMode.MARKDOWN
        )
        await update.message.reply_text(
            f"‚úÖ **Pagamento aprovado com sucesso!**\n\n"
            f"üë§ Usu√°rio: {user_nome or user_username} (ID: {user_id_aprovar})\n"
            f"üíé Plano: {plano['nome']}\n"
            f"üìÖ V√°lido at√©: {data_expiracao.strftime('%d/%m/%Y')}\n"
            f"üîó Link enviado: {link_para_usuario}"
        )
    except Exception as e:
        logger.error(f"Erro ao notificar usu√°rio {user_id_aprovar} sobre aprova√ß√£o: {e}")
        await update.message.reply_text(f"‚úÖ Pagamento aprovado para {user_id_aprovar}, mas falhei ao enviar a mensagem de confirma√ß√£o para ele. Erro: {e}")


async def rejeitar_pagamento(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != SEU_USER_ID:
        await update.message.reply_text("‚ùå Acesso negado.")
        return

    try:
        user_id_rejeitar = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå Uso: /rejeitar <user_id>")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    # Deleta o pagamento pendente. Voc√™ pode optar por marcar como rejeitado em vez de deletar.
    # Aqui, vamos apenas deletar para simplificar, assumindo que se rejeitado, o processo recome√ßa.
    cursor.execute('''
    DELETE FROM pagamentos_pendentes
    WHERE user_id = ? AND comprovante_enviado = 1 AND aprovado = 0
    ''', (user_id_rejeitar,))
    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()

    if deleted_rows > 0:
        try:
            await context.bot.send_message(
                chat_id=user_id_rejeitar,
                text="üòî **Pagamento n√£o aprovado** üòî\n\n"
                     "Oi, meu bem. Verifiquei seu comprovante, mas infelizmente n√£o consegui confirmar seu pagamento desta vez.\n\n"
                     "Pode ter sido algum probleminha com o comprovante ou com os dados.\n\n"
                     "Por favor, verifique tudo direitinho e, se quiser, pode tentar me enviar novamente ou falar comigo para a gente resolver, t√° bom?\n\n"
                     "Estou aqui para te ajudar! üòä"
            )
        except Exception as e:
            logger.error(f"Erro ao notificar usu√°rio {user_id_rejeitar} sobre rejei√ß√£o: {e}")

        await update.message.reply_text(f"üóëÔ∏è Pagamento pendente para o usu√°rio {user_id_rejeitar} foi marcado como rejeitado/removido e ele foi notificado.")
    else:
        await update.message.reply_text(f"ü§∑‚Äç‚ôÄÔ∏è Nenhum pagamento pendente (com comprovante enviado e n√£o aprovado) encontrado para o usu√°rio {user_id_rejeitar} para rejeitar.")


async def listar_usuarios_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != SEU_USER_ID:
        await update.message.reply_text("‚ùå Acesso negado.")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    SELECT user_id, username, nome, plano_id, data_expiracao
    FROM usuarios_vip
    WHERE ativo = 1
    ORDER BY data_expiracao
    ''')
    usuarios = cursor.fetchall()
    conn.close()

    if not usuarios:
        await update.message.reply_text("üìã Nenhum usu√°rio VIP ativo no momento.")
        return

    texto = "üìã **MEUS ASSINANTES VIP ATIVOS**\n\n"
    for usuario_db in usuarios:
        uid, u_username, u_nome, u_plano_id, u_data_exp = usuario_db
        u_data_exp_obj = datetime.strptime(u_data_exp, "%Y-%m-%d %H:%M:%S")
        dias_restantes = (u_data_exp_obj - datetime.now()).days
        plano_nome_display = PLANOS.get(u_plano_id, {}).get('nome', u_plano_id) # Mostra nome do plano ou ID se n√£o encontrar

        status_emoji = "üü¢" if dias_restantes > 7 else "üü°" if dias_restantes >= 0 else "üî¥"

        texto += f"{status_emoji} **{u_nome or 'Nome n√£o dispon√≠vel'}** (@{u_username or 'N/A'})\n"
        texto += f"   üÜî ID: `{uid}`\n"
        texto += f"   üíé Plano: {plano_nome_display}\n"
        texto += f"   üìÖ Expira em: {u_data_exp_obj.strftime('%d/%m/%Y √†s %H:%M')}\n"
        texto += f"   ‚è≥ Dias restantes: {dias_restantes if dias_restantes >=0 else 'Expirado!'}\n\n"

    if len(texto) > 4096: # Limite do Telegram
        partes = [texto[i:i + 4000] for i in range(0, len(texto), 4000)]
        for parte in partes:
            await update.message.reply_text(parte, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text(texto, parse_mode=ParseMode.MARKDOWN)


async def pendentes_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != SEU_USER_ID:
        await update.message.reply_text("‚ùå Acesso negado.")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    SELECT user_id, username, nome, plano_id, valor, data_solicitacao, comprovante_enviado
    FROM pagamentos_pendentes
    WHERE aprovado = 0
    ORDER BY data_solicitacao DESC
    ''')
    pendentes = cursor.fetchall()
    conn.close()

    if not pendentes:
        await update.message.reply_text("üìã Nenhum pagamento pendente no momento. Tudo em dia!")
        return

    texto = "üí≥ **PAGAMENTOS PENDENTES DE APROVA√á√ÉO**\n\n"
    for pag_pendente in pendentes:
        p_uid, p_username, p_nome, p_plano_id, p_valor, p_data_sol, p_comprovante = pag_pendente
        status_comp = "‚úÖ Comprovante Enviado" if p_comprovante else "‚è≥ Aguardando Comprovante"
        plano_nome_display = PLANOS.get(p_plano_id, {}).get('nome', p_plano_id)

        texto += f"üë§ **{p_nome or 'Nome n√£o dispon√≠vel'}** (@{p_username or 'N/A'})\n"
        texto += f"   üÜî ID: `{p_uid}`\n"
        texto += f"   üíé Plano: {plano_nome_display} ({p_valor})\n"
        texto += f"   üìÖ Solicitado em: {datetime.strptime(p_data_sol, '%Y-%m-%d %H:%M:%S').strftime('%d/%m/%y %H:%M')}\n"
        texto += f"   üìé Comprovante: {status_comp}\n"

        if p_comprovante:
            texto += f"   üëâ Use: `/aprovar {p_uid} {p_plano_id}` ou `/rejeitar {p_uid}`\n"
        texto += "\n"

    if len(texto) > 4096:
        partes = [texto[i:i + 4000] for i in range(0, len(texto), 4000)]
        for parte in partes:
            await update.message.reply_text(parte, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text(texto, parse_mode=ParseMode.MARKDOWN)


async def verificar_expirados_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("JOB: Iniciando verifica√ß√£o de usu√°rios expirados...")
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    agora_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''
    SELECT user_id, nome, plano_id, username FROM usuarios_vip
    WHERE ativo = 1 AND data_expiracao < ?
    ''', (agora_str,))
    usuarios_expirados = cursor.fetchall()

    if not usuarios_expirados:
        logger.info("JOB: Nenhum usu√°rio expirado encontrado.")
        conn.close()
        return

    # Marcar como inativos primeiro
    user_ids_expirados = [ue[0] for ue in usuarios_expirados]
    placeholders = ','.join('?' for _ in user_ids_expirados)
    cursor.execute(f'''
    UPDATE usuarios_vip SET ativo = 0
    WHERE user_id IN ({placeholders})
    ''', user_ids_expirados)
    conn.commit()
    logger.info(f"JOB: {len(user_ids_expirados)} usu√°rios marcados como inativos no DB.")

    conn.close() # Fechar conex√£o antes de longas opera√ß√µes de IO (API do Telegram)

    removidos_count = 0
    falha_remocao_ids = []
    admin_notification_lines = ["üîÑ **Assinaturas Expiradas e Usu√°rios Removidos do VIP:**\n"]

    for user_id, nome, plano_id_exp, username in usuarios_expirados:
        plano_nome_exp = PLANOS.get(plano_id_exp, {}).get('nome', plano_id_exp)
        try:
            await context.bot.ban_chat_member(chat_id=CANAL_VIP_ID, user_id=user_id)
            # √â uma boa pr√°tica remover o banimento imediatamente se a inten√ß√£o √© apenas remover, n√£o banir permanentemente.
            # No entanto, banir e n√£o remover o banimento garante que n√£o possam reentrar por links antigos.
            # Se quiser que possam re-assinar facilmente, use unban_chat_member.
            # await context.bot.unban_chat_member(chat_id=CANAL_VIP_ID, user_id=user_id)
            logger.info(f"JOB: Usu√°rio {user_id} ({nome}) removido do canal {CANAL_VIP_ID} por expira√ß√£o.")
            removidos_count += 1
            admin_notification_lines.append(f"  - ‚úÖ {nome or 'Usu√°rio'} (@{username or 'N/A'}), ID `{user_id}`, Plano: {plano_nome_exp}")

            try: # Notificar usu√°rio sobre expira√ß√£o
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚è∞ **Seu acesso VIP ao meu cantinho expirou**\n\n"
                         f"Oi {nome or 'flor'}! üòä\n\n"
                         f"Seu plano **{plano_nome_exp}** chegou ao fim. Que pena que o tempo voou!\n\n"
                         f"Mas n√£o se preocupe! Se quiser continuar se divertindo comigo e ter acesso a todas as novidades, √© s√≥ renovar!\n"
                         f"Me chame com um /start para ver os planos novamente. Posso at√© ter uma surpresinha pra voc√™ que j√° √© de casa! üòâ\n\n"
                         f"Obrigada por ter feito parte do meu VIP! Espero te ver de volta em breve! üíï",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e_notify:
                logger.warning(f"JOB: Falha ao notificar usu√°rio {user_id} sobre expira√ß√£o: {e_notify}")

        except Exception as e_ban:
            logger.error(f"JOB: Falha ao remover usu√°rio {user_id} do canal {CANAL_VIP_ID}: {e_ban}")
            falha_remocao_ids.append(user_id)
            admin_notification_lines.append(f"  - ‚ùå Falha ao remover {nome or 'Usu√°rio'} (@{username or 'N/A'}), ID `{user_id}`. Verificar manualmente.")


    if removidos_count > 0 or falha_remocao_ids:
        if falha_remocao_ids:
             admin_notification_lines.append(f"\n‚ö†Ô∏è **IDs com falha na remo√ß√£o (verificar no canal):** {', '.join(map(str, falha_remocao_ids))}")
        try:
            await context.bot.send_message(chat_id=SEU_USER_ID, text="\n".join(admin_notification_lines), parse_mode=ParseMode.MARKDOWN)
        except Exception as e_admin_notify:
            logger.error(f"JOB: Falha ao enviar notifica√ß√£o de expira√ß√£o para admin: {e_admin_notify}")

    logger.info(f"JOB: Verifica√ß√£o de usu√°rios expirados conclu√≠da. {removidos_count} removidos. {len(falha_remocao_ids)} falhas.")


async def comando_verificar_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != SEU_USER_ID:
        await update.message.reply_text("‚ùå Acesso negado.")
        return
    await update.message.reply_text("‚è≥ Iniciando verifica√ß√£o manual de usu√°rios expirados... Aguarde o resultado.")
    await verificar_expirados_job(context) # Chama a mesma l√≥gica do job
    await update.message.reply_text("‚úÖ Verifica√ß√£o manual de usu√°rios expirados conclu√≠da. Verifique os logs ou notifica√ß√µes para detalhes.")


def main():
    inicializar_banco()
    application = Application.builder().token(TOKEN).build()

    # Handlers de Comando
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("usuarios", listar_usuarios_command))
    application.add_handler(CommandHandler("pendentes", pendentes_command))
    application.add_handler(CommandHandler("aprovar", aprovar_pagamento))
    application.add_handler(CommandHandler("rejeitar", rejeitar_pagamento))
    application.add_handler(CommandHandler("verificarvip", comando_verificar_manual))


    # Handler de Callback (bot√µes)
    application.add_handler(CallbackQueryHandler(callback_handler))

    # Handler para receber comprovantes (fotos e documentos)
    application.add_handler(MessageHandler(
        (filters.PHOTO | filters.Document.IMAGE) & (~filters.COMMAND), # Apenas fotos ou documentos que s√£o imagens, e n√£o comandos
        handle_comprovante
    ))

    # Job para verifica√ß√£o autom√°tica de expira√ß√µes
    if application.job_queue:
        application.job_queue.run_repeating(
            verificar_expirados_job,
            interval=3600,  # A cada 1 hora (3600 segundos)
            first=60  # Primeira execu√ß√£o ap√≥s 60 segundos do bot iniciar
        )
        logger.info("Job de verifica√ß√£o de expira√ß√µes agendado.")
    else:
        logger.warning("JobQueue n√£o est√° dispon√≠vel. A verifica√ß√£o autom√°tica de expira√ß√µes n√£o funcionar√°.")

    logger.info("Bot iniciado! Estou pronta para atender... ‚ú®")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
